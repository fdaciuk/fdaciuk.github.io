<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-02-19T02:02:21.361Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Acabando com milhões de contas no Gmail]]></title>
    <link href="http://blog.da2k.com.br/2015/02/19/acabando-com-milhoes-de-contas-no-gmail/"/>
    <id>http://blog.da2k.com.br/2015/02/19/acabando-com-milhoes-de-contas-no-gmail/</id>
    <published>2015-02-19T00:00:00.000Z</published>
    <updated>2015-02-19T02:01:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/2015/02/gmail.png" alt=""></p>
<p>Cada vez que você cria uma conta em um serviço novo, você cria também um e-mail novo para não correr perigo de receber SPAM na sua conta principal? Pois saiba que, se você usa <strong>Gmail</strong>, você tem uma solução melhor pra isso! Vem comigo! ;)</p>
<a id="more"></a>

<p>O <strong>Gmail</strong> tem um sistema de segurança que não deixa outras pessoas criarem e-mails parecidos com o seu, - usando pontos - pois isso poderia ser usado para qualquer fim, e o seu nome seria usado sem permissão.</p>
<p>Por exemplo: se o seu e-mail é: <code>fulaninho.da.silva@gmail.com</code>, ninguém poderá cadastrar e-mails como:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fulaninhodasilva@gmail.com</div><div class="line">fulaninho.dasilva@gmail.com</div><div class="line">fulaninho.d.a.s.i.l.v.a@gmail.com</div></pre></td></tr></table></figure>

<p>Todas as combinações acima são válidas, e serão enviadas para o seu e-mail de cadastro. O <strong>Gmail</strong> cria <em>aliases</em> com pontos, para facilitar a entrega dos e-mails :)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="O_sinal_de_+">O sinal de <code>+</code></h2>
<p>Uma outra forma de se aproveitar dos <em>alias</em>, é o sinal de <code>+</code>. Ao invés de criar várias contas diferentes para cada serviço que vocẽ se cadastra, você pode se fazer como abaixo (imagine um cadastro no Facebook):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fulaninho.da.silva+facebook@gmail.com</div></pre></td></tr></table></figure>

<p>Após adicionar o sinal de <code>+</code>, você pode colocar qualquer sequência de caracteres (letras ou números), que o e-mail ainda será enviado para <code>fulaninho.da.silva@gmail.com</code>. Legal não? :D</p>
<p>Fazendo isso, você pode, por exemplo, usar os <a href="https://support.google.com/mail/answer/6579?hl=pt-BR" target="_blank" rel="external">filtros</a> para marcar os e-mails que chegarem para esse endereço com a label <code>FACEBOOK</code>. Ou talvez ignorar a caixa de entrada. Dá até pra saber quem está repassando seu e-mail para terceiros com isso! Se chegar um e-mail do Hotel Urbano com o <code>+facebook</code> no final, já sabe quem culpar :P</p>
<p>Coisa de louco, né? xD</p>
<p>Sei que a dica é bastante antiga, mas conversei com bastante gente que ainda não conhecia, por isso resolvi fazer o post :)</p>
<p>E você? Conhece alguma outra maracutaia que dá pra fazer com outro cliente de e-mail? Ou com o Gmail mesmo xD<br>Compartilhe conosco :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/2015/02/gmail.png" alt=""></p>
<p>Cada vez que você cria uma conta em um serviço novo, você cria também um e-mail novo para não correr perigo de receber SPAM na sua conta principal? Pois saiba que, se você usa <strong>Gmail</strong>, você tem uma solução melhor pra isso! Vem comigo! ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Commits que fecham issues]]></title>
    <link href="http://blog.da2k.com.br/2015/02/18/segredos-do-github-commits-que-fecham-issues/"/>
    <id>http://blog.da2k.com.br/2015/02/18/segredos-do-github-commits-que-fecham-issues/</id>
    <published>2015-02-18T00:00:00.000Z</published>
    <updated>2015-02-18T02:16:56.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/commits-close-issues.png" alt=""></p>
<p><em>Abre uma issue, resolve o problema, commita, faz o push, fecha a issue. Abre uma issue, resolve o problema, commita, faz o push, fecha a issue.</em></p>
<p>Você ainda faz isso? Sai dessa! Vem comigo que eu vou te mostrar uma forma de automatizar esse processo ;)</p>
<a id="more"></a>

<p>Essa coisa de ficar lembrando de fechar a <em>issue</em> logo após a sua solução, em alguns casos, torna-se bastante chato e repetitivo. </p>
<p><em>Não tem como automatizar esse isso?</em></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>O <strong>Github</strong> tem um <em>segredinho</em>, onde você consegue fechar uma issue através de uma mensagem de commit.</p>
<p><em>Como é que é?</em></p>
<p>Isso mesmo que você leu: você pode commitar e, ao mesmo tempo, a <em>issue</em> será fechada!</p>
<p><em>Como isso?</em></p>
<p>Você já deve saber que inglês é essencial hoje em dia. Quando você codifica, principalmente se você pretende colaborar com projetos Open Source, você deveria escrever seus nomes de funções, métodos, variáveis, etc., tudo em inglês, correto? Pois assim, mais pessoas poderão ter acesso ao projeto, já que inglês é uma linguagem mundial!</p>
<p><em>E o que isso tem a ver com o post?</em></p>
<p>Já ia chegar lá xD<br>O <strong>Github</strong> tem algumas <em>palavras mágicas</em> que você pode usar na sua mensagem de commit, para fechar uma <em>issue</em>. Você porecisa referenciar também, o ID da <em>issue</em> (aquele número que aparece na URL quando você acessa a <em>issue</em>).</p>
<p>As palavras chave são:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fix, fixes, fixed, close, closes, closed, resolve, resolves, resolved</div></pre></td></tr></table></figure>

<p>Então você pode escrever sua mensagem de commit mais ou menos assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"Fix error on issue #32"</span></div></pre></td></tr></table></figure>

<p>Usando uma das <em>palavras mágicas</em>, e referenciando a <em>issue</em> com a hash <code>#</code> + número/ID da <em>issue</em>, - essas informações só precisam aparecer na mensagem de commit, não precisam ter uma ordem específica - a <em>issue </em>#32<em> será fechada (nesse caso)</em>.</p>
<p>Bom, uma dica bem simples, mas que pode te poupar um bom trabalho com seus projetos <em>open source</em> :D</p>
<p>Um abraço e até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/commits-close-issues.png" alt=""></p>
<p><em>Abre uma issue, resolve o problema, commita, faz o push, fecha a issue. Abre uma issue, resolve o problema, commita, faz o push, fecha a issue.</em></p>
<p>Você ainda faz isso? Sai dessa! Vem comigo que eu vou te mostrar uma forma de automatizar esse processo ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stylus - Usando Mixins]]></title>
    <link href="http://blog.da2k.com.br/2015/02/17/stylus-usando-mixins/"/>
    <id>http://blog.da2k.com.br/2015/02/17/stylus-usando-mixins/</id>
    <published>2015-02-17T00:00:00.000Z</published>
    <updated>2015-02-17T23:21:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/stylus-mixins.png" alt=""></p>
<p>Depois do <a href="http://blog.da2k.com.br/2015/02/15/escrevendo-css-com-stylus/" target="_blank" rel="external">primeiro post mostrando toda a lindeza do Stylus</a>, como ele funciona, e as vantagens que ele tem sobre outros pré-processadores, nesse novo artigo da série, vamos ver como utilizar todo o poder dos mixins dentro do Stylus! Bora? ;)</p>
<a id="more"></a>

<h2 id="Mixins">Mixins</h2>
<p>Você define <em>mixins</em> e <em>functions</em> no <strong>Stylus</strong> da mesma maneira, mas eles tem diferentes tipos de aplicações.</p>
<p><em>Mixins</em> são invocados como <strong>declarações</strong> (<em>statements</em>). Um mixin vai servir basicamente para adicionar um trecho de código CSS no seu seletor. Veja o exemplo:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">border-radius</span>(n)</div><div class="line">  -webkit-<span class="attribute">border-radius</span> n</div><div class="line">  -moz-<span class="attribute">border-radius</span> n</div><div class="line">  <span class="attribute">border-radius</span> n</div><div class="line">  </div><div class="line"><span class="tag">img</span></div><div class="line">  <span class="function">border-radius</span>(10px)</div></pre></td></tr></table></figure>

<p>Compila para:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">img</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Criamos um <em>mixin</em> chamado <code>border-radius</code>, que recebe no parâmetro <code>n</code>, um valor para <em>border-radius</em>. Quando invocamos o <em>mixin</em> dentro do nosso seletor, ele imprime tudo o que foi declarado no corpo desse <em>mixin</em>.</p>
<p>Nós podemos ainda invocar o <em>mixin</em> sem os parênteses:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">img</span></div><div class="line">  border-radius 10px</div></pre></td></tr></table></figure>

<p>Que irá compilar o mesmo resultado :)</p>
<p>Note que, dentro do <em>mixin</em> <code>border-radius</code>, temos uma chamada à propriedade CSS <code>border-radius</code>, mas ela é tratada como uma propriedade CSS mesmo, e não como a invocação de uma função recursiva. O Stylus é muito esperto! :D</p>
<p>Mas ainda podemos ir além: sabendo que <strong>Stylus</strong> é Javascript, podemos nos aproveitar do <code>arguments</code> para passar vários valores para o <em>mixin</em>, assim como faríamos com funções em <strong>Javascript</strong>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">border-radius()</div><div class="line">  -<span class="ruby">webkit-border-radius arguments</span></div><div class="line">  -<span class="ruby">moz-border-radius arguments</span></div><div class="line">  border-radius arguments</div><div class="line">  </div><div class="line">img</div><div class="line">  border-radius 10px/12px 10px</div><div class="line">  </div><div class="line">div</div><div class="line">    border-radius 10px 10px/12px 20px 5px</div></pre></td></tr></table></figure>

<p>E isso vai compilar para:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">img</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">10px</span>/<span class="number">12px</span> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">10px</span>/<span class="number">12px</span> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10px</span>/<span class="number">12px</span> <span class="number">10px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">10px</span> <span class="number">10px</span>/<span class="number">12px</span> <span class="number">20px</span> <span class="number">5px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">10px</span> <span class="number">10px</span>/<span class="number">12px</span> <span class="number">20px</span> <span class="number">5px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10px</span> <span class="number">10px</span>/<span class="number">12px</span> <span class="number">20px</span> <span class="number">5px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><code>arguments</code> é um valor implítico em funções <strong>Javascript</strong>, onde é definido uma coleção dos argumentos passados para a função. Dessa forma, você não precisa ter um valor de parâmetros definido para o seu mixin :D</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Parent_Reference">Parent Reference</h2>
<p>Podemos usar <em>Parent Reference</em>, que vimos no artigo anterior, também nos <em>mixins</em>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">primary-button</span>()</div><div class="line">  <span class="attribute">background</span> <span class="id">#fc0</span></div><div class="line">  <span class="attribute">color</span> <span class="id">#fff</span></div><div class="line">  </div><div class="line">  &<span class="pseudo">:hover</span></div><div class="line">    <span class="attribute">color</span> <span class="id">#f00</span></div><div class="line">    <span class="attribute">background</span> <span class="id">#e2e2e2</span></div><div class="line">  </div><div class="line"><span class="class">.button-send</span></div><div class="line">  <span class="function">primary-button</span>()</div></pre></td></tr></table></figure>

<p>Que irá compilar:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class">.button-send</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.button-send</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#f00</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#e2e2e2</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Temos outras milhões de possibilidades de uso para os mixins!<br>Para saber mais, visite: <a href="http://learnboost.github.io/stylus/docs/mixins.html" target="_blank" rel="external">http://learnboost.github.io/stylus/docs/mixins.html</a></p>
<p>Dúvidas? Comente!</p>
<p>Até o próximo! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/stylus-mixins.png" alt=""></p>
<p>Depois do <a href="http://blog.da2k.com.br/2015/02/15/escrevendo-css-com-stylus/" target="_blank" rel="external">primeiro post mostrando toda a lindeza do Stylus</a>, como ele funciona, e as vantagens que ele tem sobre outros pré-processadores, nesse novo artigo da série, vamos ver como utilizar todo o poder dos mixins dentro do Stylus! Bora? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="css" scheme="http://blog.da2k.com.br/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Acabando com SPAM nos seus formulários]]></title>
    <link href="http://blog.da2k.com.br/2015/02/16/acabando-com-spam-nos-seus-formularios/"/>
    <id>http://blog.da2k.com.br/2015/02/16/acabando-com-spam-nos-seus-formularios/</id>
    <published>2015-02-16T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/spam.png" alt=""></p>
<p>Independente da linguagem de backend que você utiliza, <em>SPAMs</em> são sempre um problema. É você colocar um formulário no seu site, e começar a receber milhões de e-mails de robôs. Tem solução pra isso? Sim! E não é captcha!</p>
<p>Quer saber o que é? Vem que eu te mostro :D</p>
<a id="more"></a>

<p>Essa é uma dica rápida, mas que pode acabar com a dor de cabeça de muita gente.</p>
<p>Quando você tem esse tipo de problema, a primeira coisa que vêm à cabeça é: <em>Vou colocar um captcha!</em></p>
<p>Aí você percebe que os e-mails recebidos começam a diminuir, só que a balança pende para o lado errado: humanos deixam de enviar mensagens, pois não conseguem ler um captcha direito. Já robôs <a href="https://vimeo.com/77431982" target="_blank" rel="external">conseguem descobrir praticamente 100% dos captchas atuais</a>, e enviam mensagens com links, propagandas, etc., loucamente!</p>
<p>Aí você pensa: <em>Vou colocar então um campo para o usuário efetuar uma ação simples: uma soma, por exemplo.</em> Você coloca dois números aleatórios e manda a pessoa colocar o resultado em um <code>input</code>. Já melhorou um pouco a usabilidade, mas se você parar pra pensar, o usuário nada tem a ver com os SPAMs que você recebe.</p>
<p>Porque dificultar para o usuário enviar uma mensagem, sendo que os robôs vão continuar enviando SPAMs?</p>
<p>Quando estamos programando, em alguns momentos precisamos pensar “ao contrário”, ou fora da caixa. Imagine esse exemplo (em JS):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDataById</span><span class="params">( id )</span> </span>{</div><div class="line">  <span class="keyword">if</span>( id ) {</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">      name: getUserName(),</div><div class="line">      address: getUserAddress(),</div><div class="line">      accountInfo: getUserAccountInfo()</div><div class="line">    };</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> {</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Se nós pensássemos “de forma invertida”, poderíamos tirar toda a nossa lógica de dentro do <code>if</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDataById</span><span class="params">( id )</span> </span>{</div><div class="line">  <span class="keyword">var</span> userdata = {};</div><div class="line">  <span class="keyword">if</span>( !id )</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    name: getUserName(),</div><div class="line">    address: getUserAddress(),</div><div class="line">    accountInfo: getUserAccountInfo()</div><div class="line">  };</div><div class="line">}</div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Ao invés de verificar se o <code>id</code> existe para pegar todos os dados, e se não existir, retornar <code>false</code>, fazemos o contrário: se o <code>id</code> não existir, retorna <code>false</code> de uma vez. O resto só vai acontecer se o <code>id</code> existir!</p>
<p>Para formulários, podemos pensar da mesma forma! Se você perceber, os robôs preenchem todos os campos do seu formulário. Então o que você pode fazer é o seguinte: crie um campo <code>input</code>, e esconda-o com CSS. O seu usuário não verá esse campo, logo, ele não será preenchido. Já um robô, que vai consultar seu HTML, vai ver o campo, e vai preenchê-lo! Então você só precisa validar no backend: se o campo foi preenchido, você não faz nada. Caso contrário, você envia o e-mail :D</p>
<p>É importante deixar nesse campo um <code>placeholder</code>, avisando ao usuário que ele não deve preencher o campo, caso ele desabilite o CSS por qualquer motivo, e o seu campo fique visível.</p>
<p>Tive problemas com vários formulários em sites e, após fazer isso, o problema foi resolvido em 100% dos casos!</p>
<p>Mas eu não descobri isso sozinho. Eu peguei a ideia de um formulário do <strong>Mailchimp</strong>, que faz exatamente isso!</p>
<p>Grande sacada, não?</p>
<p>O que achou da dica? Já conhecia? Tem uma técnica melhor? Compartilhe conosco! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/spam.png" alt=""></p>
<p>Independente da linguagem de backend que você utiliza, <em>SPAMs</em> são sempre um problema. É você colocar um formulário no seu site, e começar a receber milhões de e-mails de robôs. Tem solução pra isso? Sim! E não é captcha!</p>
<p>Quer saber o que é? Vem que eu te mostro :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="spam" scheme="http://blog.da2k.com.br/tags/spam/"/>
    
      <category term="formularios" scheme="http://blog.da2k.com.br/tags/formularios/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
      <category term="html" scheme="http://blog.da2k.com.br/categories/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Escrevendo CSS com Stylus]]></title>
    <link href="http://blog.da2k.com.br/2015/02/15/escrevendo-css-com-stylus/"/>
    <id>http://blog.da2k.com.br/2015/02/15/escrevendo-css-com-stylus/</id>
    <published>2015-02-15T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/stylus.png" alt=""></p>
<p><em>Ué, vai falar de CSS? Cadê os artigos de Javascript?</em><br>E se eu te disser que <strong>Stylus</strong> é Javascript, você acredita? Duvida? Vem comigo então ;)</p>
<a id="more"></a>

<p>CSS é feio, é verboso, é estático, difícil de organizar, tem muita repetição na escrita. E quando você diminui a repetição, acaba aumentando o acoplamento, e deixando difícil de escalar. Infelizmente a ferramenta que você usa para deixar sua aplicação bonita tem todos esses defeitos. </p>
<p>Mas como escrever CSS de uma forma dinâmica e modular, que fique fácil para organizar e escalar?</p>
<p>Claro: <strong>pré-processadores!</strong></p>
<p>A maior parte dos devs que conheço trabalham com <em>SASS</em> ou <em>Less</em>, - que por sinal, são ótimas ferramentas - e talvez pela popularidade delas, acabam deixando de experimentar outras ferramentas que poderiam facilitar ainda mais o seu dia-a-dia. Sim, estou falando do <strong>Stylus!</strong></p>
<p><em>O Stylus é melhor que o SASS e o Less?</em></p>
<p>Bom, eu já usei os três, logo, tenho argumentos o bastante sobre os prós e contras de cada um. E, como <strong>opinião pessoal</strong>, eu prefiro o Stylus. E nessa <strong>nova série</strong> de posts eu vou mostrar porquê!</p>
<h2 id="Preparando_o_ambiente">Preparando o ambiente</h2>
<p>Antes de qualquer coisa, precisamos deixar nosso ambiente preparado para usar o Stylus. Só precisamos de uma ferramenta para usá-lo, e você já deve saber qual é, não?</p>
<p>Isso mesmo, o <strong>NodeJS</strong>!</p>
<p>Provavelmente você já o tem instalado. Se não tiver, <a href="http://nodejs.org/" target="_blank" rel="external">faça o download</a> e instale :)</p>
<p>Como o <strong>Node</strong> instalado, instale o <strong>Stylus</strong> de modo global:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g stylus</div></pre></td></tr></table></figure>

<p>E já temos nosso ambiente pronto :D</p>
<h2 id="Estrutura_de_diretórios_para_nosso_teste">Estrutura de diretórios para nosso teste</h2>
<p>Crie um diretório onde iremos colocar os arquivos do <strong>Stylus</strong> e os CSS compilados.</p>
<p>Dentro desse diretório, crie dois diretórios: <code>stylus</code> e <code>css</code>, e um arquivo <code>main.styl</code> dentro de <code>stylus</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── /css</div><div class="line">└── /stylus</div><div class="line">    └── main.styl</div></pre></td></tr></table></figure>

<p>Todo arquivo do <strong>stylus</strong> deve ter a extensão <code>.styl</code>.</p>
<p>Fazendo isso, podemos executar o comando abaixo para assistir os arquivos do <strong>stylus</strong> e compilar:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stylus --watch stylus/main.styl --out css/</div></pre></td></tr></table></figure>

<p>No <strong>Stylus</strong>, você só precisa assistir ao arquivo principal. Todos os arquivos importados à partir dele serão também automaticamente assistidos. Qualquer alteração nesses arquivos irá compilar o CSS final :)</p>
<h2 id="Stylus_na_prática">Stylus na prática</h2>
<p>Agora estamos prontos para presenciar todo o poder do <strong>Stylus</strong>! Coloque os códigos mostrados ao longo do post no arquivo <code>stylus/main.styl</code> (a menos que seja dito o contrário), e acompanhe o resultado gerado em <code>css/main.css</code> :)</p>
<h3 id="Seletores">Seletores</h3>
<p>Uma das diferenças do <strong>Stylus</strong> para outros pré-processadores, é que as chaves e dois-pontos e ponto-e-vírgula não são obrigatórios. Mas ainda assim, você pode usá-los, se quiser.</p>
<p>Com <strong>Less</strong>, você precisa deles sempre. Com <strong>SASS</strong>, você tem duas sintaxes: <code>.scss</code>, onde você escreve no formato do CSS, e <code>.sass</code>, onde você escreve baseado na indentação, sem ponto-e-vírgula e sem chaves.</p>
<p>Em <strong>Stylus</strong>, todos os formatos abaixo são válidos:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line">  </div><div class="line"><span class="tag">main</span></div><div class="line">  <span class="tag">color</span> <span class="id">#fff</span></div><div class="line">  </div><div class="line"><span class="tag">div</span></div><div class="line">  <span class="tag">color</span>: <span class="id">#fff</span></div></pre></td></tr></table></figure>

<p>E detalhe: você pode utilizar isso no mesmo arquivo. Experimente! Escrevendo isso no <strong>Stylus</strong>, o resultado em <code>main.css</code> será:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">main</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Você pode também unir estilos iguais, de duas formas: separando por vírgula, como no CSS, ou colocando um abaixo do outro:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">body, main, <span class="keyword">div</span></div><div class="line">  color <span class="comment">#fff</span></div><div class="line">  </div><div class="line">body</div><div class="line">main</div><div class="line"><span class="keyword">div</span></div><div class="line">  color <span class="comment">#fff</span></div></pre></td></tr></table></figure>

<p>Os dois compilam o mesmo resultado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span>,</div><div class="line"><span class="tag">main</span>,</div><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Para fazer referência ao seletor pai (<strong>parent reference</strong>), você pode usar o <code>&amp;</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a </div><div class="line">  <span class="keyword">color</span> <span class="preprocessor">#000</span></div><div class="line">  </div><div class="line">  &:hover</div><div class="line">    <span class="keyword">color</span>: <span class="preprocessor">#f00</span></div></pre></td></tr></table></figure>

<p>Compila para:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">a</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#f00</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Se você precisar usar o símbolo <code>&amp;</code> explicitamente em um seletor, você pode escapá-lo com a barra invertida:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.foo[title*=<span class="string">'\&'</span>]</div><div class="line">  font-<span class="keyword">size</span>: <span class="number">3</span>em</div></pre></td></tr></table></figure>

<p>Vai compilar o <code>&amp;</code> literalmente:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class">.foo</span><span class="attr_selector">[title*='&']</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">3em</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><em>Mas isso eu consigo fazer no <strong>SASS</strong> e no <strong>Less</strong> também!</em></p>
<p>Sim! Mas ainda tem mais! :D</p>
<p>Uma das <em>features</em> mais legais, - em minha opinião - é o <strong>Root reference</strong>. Em alguns momentos você precisa, por exemplo, que o mesmo estilo do <code>a:hover</code> seja o estilo também do <code>input:focus</code>. Como fazer isso sem duplicar o código? Usando o <strong>root reference</strong>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span></div><div class="line">  <span class="attribute">color</span> <span class="id">#000</span></div><div class="line">  </div><div class="line">  &<span class="pseudo">:hover</span></div><div class="line">  <span class="tag">input</span><span class="pseudo">:focus</span></div><div class="line">    <span class="attribute">color</span><span class="value">: <span class="hexcolor">#f00</span></span></div></pre></td></tr></table></figure>

<p>Se você compilar o código acima, ele ficará errado, pois o <strong>Stylus</strong> vai supor que o <code>input:focus</code> está dentro de <code>a</code>, por causa da indentanção:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">a</span><span class="pseudo">:hover</span>,</div><div class="line"><span class="tag">a</span> <span class="tag">input</span><span class="pseudo">:focus</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#f00</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Usando <strong>root reference</strong>, com a barra (<code>/</code>), você diz ao <strong>Stylus</strong> para ignorar a indentação e compilar aquele seletor como se ele estivesse na raiz:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">  <span class="keyword">color</span> <span class="preprocessor">#000</span></div><div class="line">  </div><div class="line">  &:hover</div><div class="line">  /input:focus</div><div class="line">    <span class="keyword">color</span>: <span class="preprocessor">#f00</span></div></pre></td></tr></table></figure>

<p>Fazendo isso, nós temos o resultado esperado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">a</span><span class="pseudo">:hover</span>,</div><div class="line"><span class="tag">input</span><span class="pseudo">:focus</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#f00</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Legal não? Isso é exclusivo do <strong>Stylus</strong> xD</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Variáveis">Variáveis</h2>
<p><strong>SASS</strong> e <strong>Less</strong> também têm variáveis, mas cada pré-processador tem uma forma de tratá-las. Em <strong>Less</strong>, elas devem começar com um <code>@</code>, e é usado o sinal <code>:</code> para atribuir valores. No <strong>SASS</strong>, as variáveis começam com <code>$</code>. A atribuição é igual ao <strong>Less</strong>.</p>
<p>Em <strong>Stylus</strong>, você tem liberdade para escrever suas variáveis como quiser, e usa-se o sinal <code>=</code> para atribuição:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">color</span> = #<span class="number">000</span></div><div class="line">font-<span class="keyword">size</span> = <span class="number">14</span>px</div><div class="line">body</div><div class="line">  <span class="keyword">color</span> <span class="keyword">color</span></div><div class="line">  font-<span class="keyword">size</span> font-<span class="keyword">size</span></div></pre></td></tr></table></figure>

<p>Vai compilar para:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">14px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Mas isso pode ser ficar um pouco confuso, já que os nomes podem ser os mesmos das propriedades. Temos então a opção de usar o <code>$</code> como prefixo da variável, como no <strong>SASS</strong>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color</span> = #<span class="number">000</span></div><div class="line"><span class="variable">$font</span>-<span class="keyword">size</span> = <span class="number">14</span>px</div><div class="line">body</div><div class="line">  <span class="keyword">color</span> <span class="variable">$color</span></div><div class="line">  font-<span class="keyword">size</span> <span class="variable">$font</span>-<span class="keyword">size</span></div></pre></td></tr></table></figure>

<p>E assim fica melhor :)</p>
<p>No <strong>Stylus</strong>, temos uma outra feature legal chamada <strong>Property Lookup</strong>, onde você pode definir variáveis locais no momento da atribuição do valor à uma propriedade:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span></div><div class="line">  <span class="attribute">width</span><span class="value">: w = <span class="number">150px</span></span></div><div class="line">  height: h = <span class="number">120px</span></div><div class="line">  margin-left: <span class="function">-</span>( w / <span class="number">2</span> )</div><div class="line">  margin-top: <span class="function">-</span>( h / <span class="number">2</span> )</div></pre></td></tr></table></figure>

<p>Só coloquei os dois-pontos para facilitar a leitura. Eles continuam opcionais, ainda nesse caso.<br>E o resultado disso é:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">150px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">120px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">75px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> -<span class="number">60px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Mas no lugar de definir novas variáveis, você ainda pode usar a própria propriedade como variável, usando o símbolo <code>@</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span></div><div class="line">  <span class="attribute">width</span> 150px</div><div class="line">  <span class="attribute">height</span> 120px</div><div class="line">  <span class="attribute">margin-left</span><span class="value">: <span class="function">-</span>( @width / <span class="number">2</span> )</span></div><div class="line">  margin-top: <span class="function">-</span>( @height / <span class="number">2</span> )</div></pre></td></tr></table></figure>

<p>Doido, não? :D</p>
<p>Por hoje é só! Esse post foi só pra dar um gostinho :P</p>
<p>Acompanhe os próximos posts da série para descobrir todos os super-poderes do <strong>Stylus</strong>!</p>
<p>Ficou com alguma dúvida? Comente!</p>
<p>Até o próximo! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/stylus.png" alt=""></p>
<p><em>Ué, vai falar de CSS? Cadê os artigos de Javascript?</em><br>E se eu te disser que <strong>Stylus</strong> é Javascript, você acredita? Duvida? Vem comigo então ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="stylus" scheme="http://blog.da2k.com.br/tags/stylus/"/>
    
      <category term="pré-processadores" scheme="http://blog.da2k.com.br/tags/pre-processadores/"/>
    
      <category term="css" scheme="http://blog.da2k.com.br/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Gists]]></title>
    <link href="http://blog.da2k.com.br/2015/02/14/segredos-do-github-gists/"/>
    <id>http://blog.da2k.com.br/2015/02/14/segredos-do-github-gists/</id>
    <published>2015-02-14T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-the-gists.png" alt=""></p>
<p>Para pequenos trechos de código, não existe ferramenta melhor que os <strong>gists</strong> do Github! Mas você pode ir um pouco além! Quer ver? Vem comigo :)</p>
<a id="more"></a>

<p>Se você não sabia, é possível adicionar arquivos e criar pequenos trechos de código, - que seria muito pouco pra um repositório completo - usando os <a href="https://gist.github.com/" target="_blank" rel="external">gists</a>.</p>
<p>Você pode criar quantos arquivos achar necessário, clicando no botão <strong>Add file</strong>.</p>
<p>O nome mostrado no <strong>gist</strong> é o nome do primeiro arquivo. Eles são organizados em ordem alfabética.</p>
<p><em>Já conheço os gists! O que tem de mais nisso?</em></p>
<h2 id="Embed">Embed</h2>
<p>Se você quiser fazer <em>embed</em> de um <strong>gist</strong> na sua aplicação, você só precisa adicionar a extensão <code>.pibb</code> na URL, e você terá a versão HTML, somente com os os arquivos do gist :)</p>
<p>Ou então, copiar o <code>script</code> de Embed na que aparece na sidebar, na lateral direita.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Versionamento_do_gist">Versionamento do gist</h2>
<p>Você pode tratar seus <strong>gists</strong> também como repositórios, pois eles podem ser clonados como qualquer outro projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://gist.github.com/<span class="number">53207</span>bdb787e41ec0fa7.git</div></pre></td></tr></table></figure>

<p>A única questão é que os <strong>gists</strong> não suportam diretórios. Se precisar criar uma esturuta de diretórios, a melhor coisa é criar um repositório no <strong>Github</strong> mesmo.</p>
<p>Para saber mais sobre os gists, leia <a href="https://help.github.com/articles/creating-gists/" target="_blank" rel="external">https://help.github.com/articles/creating-gists/</a> :)</p>
<p>Essa foi uma dica bem rápida, mas espero que ajude :)</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-the-gists.png" alt=""></p>
<p>Para pequenos trechos de código, não existe ferramenta melhor que os <strong>gists</strong> do Github! Mas você pode ir um pouco além! Quer ver? Vem comigo :)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Escalando Javascript no browser]]></title>
    <link href="http://blog.da2k.com.br/2015/02/13/escalando-javascript-no-browser/"/>
    <id>http://blog.da2k.com.br/2015/02/13/escalando-javascript-no-browser/</id>
    <published>2015-02-13T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/scalability.jpg" alt=""></p>
<p>Aí você está lá, todo pomposo, trabalhando no seu projeto, escrevendo seu JS tudo em um arquivo só, achando que vai ficar com pouco código, usando uma global aqui, outra global ali, e quando vê… já está com 4.000 linhas de código, todo perdido sem saber o que fazer! E você pensa: <em>“Porque eu não modularizei isso???”</em></p>
<p>Já dizia Renato Aragão: “<em>Se não fosse comigo, eu ria…</em>“</p>
<a id="more"></a>

<h2 id="Modularizar_é_preciso">Modularizar é preciso</h2>
<p>Quando você começa a desenvolver um projeto que vai usar muito JS, mas você não sabe o quanto, você precisa estar preparado para escalar. Seu código precisa ser o menor possível, o mais modularizado e desacoplado possível, para que você possa crescer sem problemas.</p>
<p><em>Mas como pensar nisso já no início do projeto, muitas vezes sem ter noção da quantidade de código que vou precisar escrever?</em></p>
<p>É uma pergunta que eu fiz a mim mesmo por várias vezes, quando estava desenvolvendo um projeto onde escrevi - sem minificar - mais de 7.000 linhas de JS. Juntando com as libs, o arquivo final ficou com mais de 18.700 linhas (quase 1mb sem minificar; 500kb minificado, entregue em um único arquivo). E o maior arquivo ficou com mais de 4.700 linhas, sem utilizar nenhum <em>framework</em> :(</p>
<p>E apesar de eu ter tentado desde o começo modularizar, separando um arquivo por página, ainda assim não havia conseguido chegar no modelo ideal. Nesse projeto, tive a necessidade de utilizar algumas variáveis globais para compartilhar informações entre arquivos, tentei não repetir código, mas algumas coisas ainda ficaram duplicadas, entre outros pontos críticos.</p>
<p>E não, eu não me orgulho disso. Mas posso dizer que aprendi uma lição: eu sabia menos do que pensava sobre modularização.</p>
<p>Isso me fez pensar, e buscar outras soluções que pudessem me ajudar a desenvolver um código modular e escalável. Estudei como alguns frameworks trabalhavam, aprendi outros patterns além do <em>Module Pattern</em>, li o livro <strong>Clean Code</strong>, conheci pessoas que me deram ótimas dicas de como <em>pensar simples</em>. E isso me abriu a mente para coisas novas!</p>
<p>E, por mais estranho que possa soar, pensar simples é bastante complicado! É muito difícil você reestruturar sua mente para pensar de uma forma <strong>“simples”</strong>, <strong>“modular”</strong>, <strong>“em partes”</strong>.</p>
<p>Normalmente nós já queremos pensar no <strong>todo</strong>, no projeto inteiro, como iremos chegar ao final. Mas nunca chegaremos ao final, se não dermos o primeiro passo! Temos que subir um degrau de cada vez. Pensando de forma componentizada, você quebra tudo em pequenos pedaços separados, independentes, que vão se juntando aos poucos, até formar o projeto concretizado :D</p>
<p>E nesse post, eu gostaria de compartilhar o que estou fazendo hoje para chegar nesse resultado, ou ao menos o mais próximo disso :)</p>
<p>Já escrevi um post quando eu estava <a href="http://www.voltsdigital.com.br/labs/escrevendo-javascript-em-modulos/" target="_blank" rel="external">começando a brincar com modularização</a>. Após vários aprendizados, evoluí para um <a href="http://blog.da2k.com.br/2014/03/18/meu-workflow-javascript-com-module-pattern/" target="_blank" rel="external">formato um pouco melhor</a>.</p>
<p>Após mais alguns aprendizados, cheguei nesse modelo que vos apresento hoje, que pra mim, tem sido o ideal, ao menos por enquanto :)</p>
<h2 id="Separação_de_responsabilidades">Separação de responsabilidades</h2>
<p>Se, desde o início do projeto, você já tiver na sua cabeça a definição das responsabilidades de cada parte do seu código, vai facilitar bastante para modularizá-lo.</p>
<p>Você precisa pensar de “dentro para fora”; da menor parte até o projeto final, concretizado.</p>
<p>Com certeza no meio do caminho você vai precisar fazer <em>refactory</em> em algumas partes do seu código, para remover duplicações, e deixar ele mais legível, mas saiba que isso faz parte do processo. Você só precisa identificar quando é o momento de fazer isso.</p>
<blockquote>
<p>Eu tinha um cachorro que se chamava “Pradentro”. Ele estava dentro de casa quando eu disse: “Pra fora, Pradentro!”. Ele ficou confuso, e morreu.</p>
</blockquote>
<p>Como disse acima: precisamos pensar de dentro pra fora: quais seriam as menores partes do nosso código?</p>
<h2 id="Estrutura_de_diretórios">Estrutura de diretórios</h2>
<p>Acho bastante interessante o formato como o <a href="https://angularjs.org/" target="_blank" rel="external">AngularJS</a> separa os conceitos, por isso acabei adotando algumas ideias. Basicamente, a estrutura de diretórios que utilizo é mais ou menos assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── /vendor</div><div class="line">├── /modules</div><div class="line">├── /resources</div><div class="line">├── /services</div><div class="line">├── /controllers</div><div class="line">└── app.js</div></pre></td></tr></table></figure>

<h3 id="/vendor">/vendor</h3>
<p>Aqui em <code>/vendor</code> fica tudo o que for de terceiros: <em>libs</em>, <em>frameworks</em>, <em>plugins</em>. Se necessário, podemos criar mais diretórios aqui dentro para melhorar a organização.</p>
<h3 id="/modules">/modules</h3>
<p>No diretório <code>/modules</code>, podemos criar módulos que serão comuns, e poderão ser compartilhados por toda a aplicação: <em>infinite scroll</em>, paginação, etc.</p>
<h3 id="/resources">/resources</h3>
<p>Em <code>/resources</code>, ficam as chamadas à recursos externos: basicamente os <code>resources</code> servirão para obter com Ajax dados de uma API de terceiros, ou mesmo uma API interna, por exemplo.</p>
<h3 id="/services">/services</h3>
<p>Os <code>services</code> serão auxiliadores dos <code>controllers</code>. É neles que iremos consumir as respostas dos <code>resources</code>, utilizar os <code>modules</code>, fazer tratamento de DOM, utilizar <em>plugins</em> de terceiros, e toda a parte <em>bruta</em> da nossa aplicação. Os <code>services</code> basicamente irão consumir tudo o que estiver em <code>resources</code>, <code>modules</code> e <code>vendor</code>.<br>Cada <code>service</code> deve tratar de apenas uma pequena parte da aplicação.</p>
<h3 id="/controllers">/controllers</h3>
<p>Os <code>controllers</code> continuam fazendo o papel de intermediários entre a <em>view</em> e as outras partes da aplicação, mas com o auxílio dos <code>services</code>. Eles irão chamar <code>services</code> específicos sempre que necessário, e devolver as respostas à respectiva <em>view</em>. Nenhuma lógica ou regra de negócio deveria ficar nos <code>controllers</code>, mas sim nos <code>services</code>.</p>
<h3 id="app-js">app.js</h3>
<p>E, por fim, o <code>app.js</code>, que é o cara que vai chamar os <code>controllers</code> na hora em que eles tiverem que aparecer. Em alguns casos, podemos usar também um diretório <code>routes</code>, e fazer as rotas conversarem diretamente com os <code>controllers</code>.</p>
<p>Mas isso depende de cada projeto. Essa estrutura é uma base para facilitar a modularização. Ainda dentro de cada diretório desses, podemos criar outros para organizar melhor, conforme à necessidade.</p>
<p>E, se você quiser fazer um <em>bundle</em>, juntando tudo em um arquivo só, você pode concatenar todos os arquivos, exatamente nessa ordem :)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Conteúdo_dos_arquivos">Conteúdo dos arquivos</h2>
<p>O conteúdo dos arquivos também deve manter uma convenção, para que fique fácil adicionar novos arquivos e dar manutenção nos já existentes. A estrutura base dos arquivos provavelmente vai ser a mesma, mudando apenas alguns detalhes.</p>
<p>Por exemplo: um <code>controller</code> teria uma estrutura parecida com essa:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win, doc, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ControllerHome</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.initEvents();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.initEvents = <span class="function"><span class="keyword">function</span> <span class="title">initEvents</span><span class="params">()</span> </span>{</div><div class="line">      doc.querySelector( <span class="string">'[data-js="send-form"]'</span> )</div><div class="line">        .addEventListener( <span class="string">'click'</span>, Module.ServiceSendForm.submit, <span class="literal">false</span> );</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  win.Module = win.Module || {};</div><div class="line">  win.Module.ControllerHome = ControllerHome();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Começa com uma <strong>IIFE</strong>, gera uma função <code>ControllerHome</code>, para gerenciar tudo o que for feito na home. Como algumas áreas do site são comuns, - normalmente cabeçalho, rodapé e sidebar - você pode ainda criar um <code>ControllerCommon</code> para gerenciar envio de newsletter, busca, etc. Coisas que são comuns em todas as áreas da aplicação.</p>
<p>Dentro da função principal, temos dois objetos: <code>$private</code> e <code>$public</code>, retornando sempre o <code>$public</code>, para deixar público somente o que for necessário chamar de fora, ou de outro arquivo. Para <code>controllers</code>, o que ficará público basicamente será só o método <code>init</code> mesmo.</p>
<p>No <code>controller</code>, ainda podemos ter um método <code>initEvents</code>, que vai adicionar ouvintes de evento nos elementos dessa página. E os métodos que irão efetuar as ações dos eventos estarão em <code>services</code>. Na <strong>IIFE</strong>, eu adicionei como parâmetro o <code>window.Module</code>, que é um objeto que será criado para exportar nele tudo o que for referente à nossa aplicação. Esse nome fica por sua conta.</p>
<p>No final, exportamos em <code>Module.ControllerHome</code> a função <code>ControllerHome</code>, já invocando-a com <code>()</code>, para que possamos chamar o método <code>init</code> sempre precisar invocá-la novamente:</p>
<p>No <code>app.js</code> teria uma chamada assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( doc.querySelector( <span class="string">'[data-js="page-home"]'</span> ) ) {</div><div class="line">  Module.ControllerHome.init();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Que deixaria nosso <code>controller</code> pronto para uso somente se estivermos na home. Olhando dessa forma, dá pra ver que faz bastante sentido trocar esse <code>if</code> por uma rota, quando necessário :)</p>
<p>Outra coisa bastante importante é a ordem das propriedades e métodos. Sempre que tiver uma propriedade que precise ser compartilhada por todo o <code>controller</code>, ou <code>service</code>, etc., você declara ela no início do arquivo, logo abaixo das declarações de <code>$public</code> e <code>$private</code>, e sempre como propriedade de <code>$private</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $public = {};</div><div class="line"><span class="keyword">var</span> $private = {};</div><div class="line">  </div><div class="line">$private.buttonSend = doc.querySelector( <span class="string">'[data-js="button-send"]'</span> );</div></pre></td></tr></table></figure>

<p>Se precisar que elas sejam inicializadas em algum momento específico, você pode criar um método <code>initVars</code> ou <code>iniProps</code>, chamando esse método no <code>init</code>, e fazer a declaração delas ali dentro.</p>
<p>Métodos públicos devem vir sempre antes dos métodos privados, logo após as declarações de propriedades. Isso porque vai facilitar para você visualizar o que é público logo no início do arquivo.</p>
<p>Para os <code>services</code>, não precisaríamos ter os métodos <code>init</code> e <code>initEvents</code>, pois eles irão só ter métodos que serão consumidos por eventos, ou serão iniciados no método <code>init</code> do <code>controller</code>.</p>
<p>Mais um detalhe: o método <code>init</code>, no <code>controller</code>, não pode ter nada além do que invocações de funções e / ou métodos. Não coloque <code>ifs</code>, configurações de plugins, etc., no <code>init</code>. Se precisar fazer isso, crie um método privado e invoque esse método. Ou melhor ainda, crie um <code>service</code> e coloque essa lógica dentro dele.</p>
<p>Uma outra informação importante: NUNCA deixe <code>propriedades</code> como públicas. Todas as propriedades devem ser privadas.</p>
<p><em>E como eu faço para obter a informação de uma propriedade?</em></p>
<p>Você cria um método que retorna a propriedade privada!</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$private.years = <span class="number">30</span>;</div><div class="line">  </div><div class="line">$public.getYears = <span class="function"><span class="keyword">function</span> <span class="title">getYears</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> $private.years;</div><div class="line">};</div></pre></td></tr></table></figure>

<p><em>Por que fazer dessa forma?</em></p>
<p>Porque assim você garante que não haverá efeitos colaterais, se alguém trocar o valor de alguma propriedade que estiver sendo usada internamente no seu código.</p>
<p>Para obter e setar valores, use métodos <code>get</code> e <code>set</code>. No <code>get</code> você retorna a propriedade privada definida. No <code>set</code>, você seta o valor passado, e retorna o próprio objeto, que é retornado na função principal, para que você possa encadear métodos:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$public.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">( key, value )</span> </span>{</div><div class="line">  $private[ key ] = value;</div><div class="line">  <span class="keyword">return</span> $public;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Fazendo isso, você pode setar várias coisas de uma vez só:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Module.pagination</div><div class="line">  .set( <span class="string">'initialPage'</span>, <span class="number">1</span> )</div><div class="line">  .set( <span class="string">'buttonNextSelector'</span>, <span class="string">'[data-js="button-next"]'</span> );</div></pre></td></tr></table></figure>

<p>Outra boa prática é sempre nomear as funções, ainda que sejam funções anônimas que você esteja atribuindo à variáveis, pois, na hora de debugar, o debugger vai tentar pegar a propriedade <code>name</code> da função. Se ela for uma função anônima, vai ficar mais difícil de debugar, pois o atributo <code>name</code> vai estar setado como <em>undefined</em>.</p>
<p>Com essa estrutura, conseguimos trabalhar em qualquer tipo de projeto: com <em>framework</em> ou sem; com a estrutura <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a>; usando <a href="http://blog.da2k.com.br/2015/01/18/requirejs-carregando-javacript-sob-demanda/" target="_blank" rel="external">AMD</a>, <a href="http://blog.da2k.com.br/2015/01/04/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-2-3/" target="_blank" rel="external">CommonJS</a> ou <a href="http://blog.da2k.com.br/2015/01/05/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-3-3/" target="_blank" rel="external">UMD</a>; ou sem nenhum desses métodos de componentização, talvez só exportando um único objeto global e populando-o para conversar entre os módulos do nosso projeto.</p>
<p>Esse formato tem resolvido muito bem pra mim hoje. Mas, e sobre você? Como você modulariza seus arquivos, pensando na escalabilidade do projeto? Compartilhe conosco! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/scalability.jpg" alt=""></p>
<p>Aí você está lá, todo pomposo, trabalhando no seu projeto, escrevendo seu JS tudo em um arquivo só, achando que vai ficar com pouco código, usando uma global aqui, outra global ali, e quando vê… já está com 4.000 linhas de código, todo perdido sem saber o que fazer! E você pensa: <em>“Porque eu não modularizei isso???”</em></p>
<p>Já dizia Renato Aragão: “<em>Se não fosse comigo, eu ria…</em>“</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="escalabilidade" scheme="http://blog.da2k.com.br/tags/escalabilidade/"/>
    
      <category term="workflow" scheme="http://blog.da2k.com.br/tags/workflow/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Elimine os comentários]]></title>
    <link href="http://blog.da2k.com.br/2015/02/12/elimine-os-comentarios/"/>
    <id>http://blog.da2k.com.br/2015/02/12/elimine-os-comentarios/</id>
    <published>2015-02-12T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/comments.png" alt=""></p>
<p><em>Comments are evil</em>. Você provavelmente já deve ter ouvido isso. Comentários mentem. Eles enganam você. Eles querem te pegar.</p>
<a id="more"></a>

<p>Já usei muito comentário nos meus códigos. Muito mesmo. Mas, apesar de negar no início, tive que aceitar que isso é uma má prática. E eu vou te explicar o por quê. Depois de ler esse post, você poderá tirar suas próprias conclusões :)</p>
<h2 id="Comentários_mentem">Comentários mentem</h2>
<p>Para que seu código seja considerado um <em>Código Limpo</em>, ele precisa ser legível, e qualquer programador que o leia precisa entender qual era a sua intenção com aquele código. </p>
<p>Aí você está codando um algoritmo mega complicado, e pensa: </p>
<p><em>Vou deixar uns comentários aqui, pro próximo programador que ler isso saiba o que eu quis dizer! Ou até pra que eu mesmo lembre do que eu estava fazendo daqui a alguns dias!</em></p>
<p>Agora responda pra mim: de todas as vezes que você já editou código na sua vida, onde tinha comentários falando sobre o que o código fazia, quantas vezes você leu o comentário? E quantas vezes você lembrou de atualizar o comentário, para que correspondesse ao seu novo código?</p>
<p>Vocẽ tem costume de fazer isso? Seus comentários refletem exatamente o código que você fez e alterou milhares de vezes depois? Duvido! E digo isso por experiência própria.</p>
<p><strong>Comentários mentem</strong>, pois eles tem um tempo de vida muito curto. A probabilidade de você simplesmente ignorar um comentário - já que os editores normalmente os deixam em uma cor quase apagada - é muito grande.</p>
<p>Olhe esse exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Sempre retorna true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailable</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>É um exemplo besta, mas serve para reflexão: será que, depois de mudar o retorno da função, você mudaria o comentário? Não, seja sincero! Pare e pense.<br>Óbvio que não! O comentário iria ficar pra sempre ali, naquela mentira, enganando a si mesmo e a quem se atrever a ler, servindo apenas como lixo para confundir.</p>
<p>Aí você me diz: <em>Então como eu vou fazer pra lembrar daquele algoritmo dificílimo que eu escrevi? Se eu não comentar, amanhã eu já nem sei o que eu fiz!</em></p>
<p>Se isso acontece com você, provavelmente você está fazendo alguma coisa errada. Eu sei que é duro ouvir isso, mas é a realidade. Antes de querer me bater, respire, pense… e aceite, pois é a realidade.</p>
<p>Um amigo me disse o seguinte sobre comentários:</p>
<p><em>Você só deve usar comentários no seu código se ele estiver tão ruim, mas tão ruim, que nem você consiga entender o que você fez.</em></p>
<p><em>Você precisa pensar assim: “Não consegui escrever um código decente e legível, sou um derrotado pois vou precisar escrever um comentário para dizer o que o meu código faz!”</em></p>
<p>Eu sei que é bastante duro, talvez você só compreenda com o tempo, mas é necessário entender o mal que faz um comentário no seu código.</p>
<p><em>Mas eu só comento no final das minhas funções, pois elas ficam muito grandes e eu precisaria usar a rolagem para saber qual é a função que está terminando naquele fechamento de chaves!</em></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Se a sua função está ficando tão grande, a ponto de você precisar comentar no final dela, é sinal de que ela precisa de um <em>refactory</em>. Deixe-a mais enxuta. Ela provavelmente tem muitas responsabilidades e faz mais de uma coisa. Quebre em funções menores. Vai facilitar muito a sua leitura.</p>
<p>Imagine esse código:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Verifica se o empregado tem direito aos benefícios</span></div><div class="line"><span class="keyword">if</span>( ( employee.flags && HOURLY_FLAG ) && ( employee.age &gt; <span class="number">65</span> ) )</div></pre></td></tr></table></figure>

<p>Porque já não escrever dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( employee.isElegibleForFullBenefits() )</div></pre></td></tr></table></figure>

<p>Precisa de comentário pra saber o que está sendo testado nesse <code>if</code>? O método deixa a intenção muito clara. Com isso, podemos ver que comentários podem ser desculpas para código ruim. Na maior parte das vezes, podemos melhorar nosso código somente criando uma função / método, como feito acima.</p>
<p>Fazendo isso, você deixa seu código realmente limpo. Qualquer programador que ler seu código, vai conseguir facilmente entender o que você pretendia fazer :)</p>
<p>Já recomendei uma vez, mas recomendo novamente a leitura do livro <strong>Clean Code</strong>, que fala detalhadamente sobre esse assunto! Com certeza você será um programador um pouco melhor quando parar de usar comentários :D</p>
<p>Sei que é um assunto bastante polêmico, mas gostaria de ouvir de você: o que você pensa sobre comentários? Tem uma opinião diferente? Comente! Vamos fazer uma discussão saudável sobre o assunto ;)</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/comments.png" alt=""></p>
<p><em>Comments are evil</em>. Você provavelmente já deve ter ouvido isso. Comentários mentem. Eles enganam você. Eles querem te pegar.</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="clean code" scheme="http://blog.da2k.com.br/tags/clean-code/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - controlando a exibição dos dados]]></title>
    <link href="http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/"/>
    <id>http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/</id>
    <published>2015-02-11T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-controller.jpg" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">post anterior</a>, criamos a interface para nossa view. Hoje veremos como criar a base que vai controlar o conteúdo retornado! Vem comigo? ;)</p>
<a id="more"></a>

<h2 id="O_controller">O controller</h2>
<p>Lembra que criamos o arquivo <code>functions/controllers/controller-single.php</code>? A primeira coisa que precisamos fazer então, é incluir esse arquivo na nossa estrutura. Mas onde?</p>
<p>No <strong>functions.php</strong>! Esse arquivo é a “cola” que vai juntar todo o controle da nossa aplicação às nossas <em>views</em>.</p>
<p>Vamos então incluir nosso controller no início do nosso <code>functions.php</code>, logo abaixo do <code>require</code> do <code>security.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-single.php'</span>;</div></pre></td></tr></table></figure>

<p>Só um pequeno adendo: o <strong>Pedro Diaz</strong> me questionou <a href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/#comment-1792414180" target="_blank" rel="external">nesse post</a> que, quando ele tentava incluir o <code>security.php</code> usando um caminho relativo, o arquivo não era encontrado. Para resolver o problema, podemos fazer como eu fiz no exemplo acima: utilizar a <em>constante mágica</em> do PHP, <code>__DIR__</code>, que vai retornar o diretório atual. A partir daí, você aponta para onde está o arquivo.</p>
<p>Essa constante só funciona à partir do PHP 5.3. Então, se você estiver usando uma versão anterior a essa, utilize <code>dirname( __FILE__ )</code> no lugar :)</p>
<p>Agora voltando ao post: no arquivo <code>controller-single.php</code>, vamos criar a classe que vai gerenciar nosso conteúdo:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../security.php'</span>;</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller_Single</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>{</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;thumbnail</span> = <span class="string">'thumbnail'</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;title</span> = <span class="string">'title'</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;content</span> = <span class="string">'content'</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Já expliquei sobre a boa prática de não fechar o <code>&lt;?php</code> quando você tem só código PHP no arquivo, né? ;)</p>
<p>Certo, agora precisamos instanciar essa classe na nossa view (<code>single.php</code>). Coloque o código no início do arquivo, logo abaixo de <code>get_header()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$single_post</span> = <span class="keyword">new</span> Controller_Single();</div></pre></td></tr></table></figure>

<p>Essa estrutura é a base principal que precisaremos para que o conteúdo seja mostrado corretamente na nossa view.</p>
<p>Se você não conhece <em>Orientação à objetos</em> no PHP, vou explicar rapidamente pra você entender o que foi feito, mas recomendo que você <a href="http://php.net/manual/pt_BR/language.oop5.php" target="_blank" rel="external">leia sobre o assunto</a>, pois vai ser bastante importante para nós, daqui pra frente ;)</p>
<p>Pra quem não conhece, o que pode parecer mais estranho é o método <code>__construct()</code>. Quando você cria uma classe PHP, usando <code>class Nome_Da_Classe</code>, você pode utilizar o método <code>__construct()</code> para “construir” o objeto, quando este instanciar a classe. Um outro detalhe que você deve ter reparado é o <code>$this</code>. Esse cara representa o objeto em si. Ou seja: toda propriedade ou método de dentro da <code>class</code>, pode ser chamado ali dentro via <code>$this-&gt;property_name</code> para chamar propriedades, ou <code>$this-&gt;method_name()</code>, para chamar métodos.</p>
<p>No arquivo <code>single.php</code>, repare que utilizamos o <code>new Controller_Single()</code> para instanciar a classe. Agora, o <code>$this</code>, que você vê dentro da classe, está representado pelo <code>$single_post</code>. Por isso nós conseguimos chamar o <code>thumbnail</code>, <code>title</code> e <code>content</code>, que chamamos de <em>propriedades</em> da classe, com a sintaxe de objetos:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="variable">$this</span><span class="variable">-&gt;thumbnail</span>;</div><div class="line"><span class="keyword">echo</span> <span class="variable">$this</span><span class="variable">-&gt;title</span>;</div><div class="line"><span class="keyword">echo</span> <span class="variable">$this</span><span class="variable">-&gt;content</span>;</div></pre></td></tr></table></figure>

<p>Basicamente, só para que você não fique perdido nos nomes:</p>
<ul>
<li>Quando você cria uma <strong>variável</strong> em qualquer parte do seu código PHP, o nome que se dá a ela é <em>variável</em>. Quando você cria uma variável dentro de uma <em>classe PHP</em>, o nome dado é <em>propriedade</em> da classe.</li>
<li>Quando você cria uma <strong>função</strong> em qualquer parte do seu código, damos o nome de <em>função</em>. Mas quando você cria uma função dentro de uma classe, ela é chamada <em>método</em>.</li>
</ul>
<p>Toda propriedade de uma classe, fica acessível para todos os métodos da classe, ou seja, se criarmos um outro método dentro da nossa classe, nós vamos conseguir acessar o valor de <code>$this-&gt;thumbnail</code>, por exemplo, dentro desse novo método, sem precisar usar o <code>global</code>. Isso deixa o código muito mais limpo e organizado.</p>
<p>Bom, isso foi só uma introdução pra contextualizar, pra quem ainda não conhece orientação a objetos. Se ainda ficar alguma dúvida, você pode perguntar nos comentários, ok? Vamos em frente? ;)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Sobre_o_conteúdo">Sobre o conteúdo</h2>
<p>Ainda temos um conteúdo fictício, que colocamos só para ver as coisas funcionando. Precisamos usar o conteúdo do post mesmo. Mas antes disso, vamos alterar um pouco nosso código.</p>
<p>Nós conseguimos instanciar a classe <code>Controller_Single()</code> dentro de <code>single.php</code>, porque, dentro da estrutura do WordPress, ele carrega o arquivo <code>functions.php</code> antes de qualquer template dentro do seu tema. Então, tudo o que você adiciona no <code>functions.php</code>, automaticamente fica disponível em todos os seus templates.</p>
<p>Mas nesse caso, nós não iremos instanciar essa classe diretamente na nossa view. Vamos fazer uso dos <a href="http://codex.wordpress.org/Plugin_API/Hooks" target="_blank" rel="external"><em>hooks</em></a>, para que possamos chamar os dados da single somente quando realmente eles forem necessários. Com isso, vamos aprender também como criar nossos próprios <em>hooks</em> personalizados!</p>
<h2 id="Hooks">Hooks</h2>
<p>Como já falei em um artigo anterior, <em>hooks</em> são ganchos deixados por todo o código do <strong>WordPress</strong> pelos seus desenvolvedores, para que você possa “pendurar” trechos de código em momentos específicos.</p>
<p>Por exemplo: nós temos o <em>hook</em> <strong>the_title</strong>, que é executado sempre que você chama a template tag <code>the_title()</code>, ou retorna o título com <code>get_the_title()</code>. Todas as template tags tem os dois formatos: o que “dá <em>echo</em>“ no conteúdo, e o que retorna o conteúdo.</p>
<p><em>Pra quê isso?</em></p>
<p>A vantagem disso é que, com as <em>template tags</em> (que nada mais são do que simples funções do PHP), que dão <em>echo</em> no conteúdo, você não precisa escrever o <em>echo</em>. Já se você quiser salvar o valor em uma variável, você utiliza a versão prefixada com <code>get_</code>, que vai retornar o valor, ao invés de printar. Basicamente a regra para essas funções é colocar o <code>get_</code> na frente, sempre que você quiser retornar, salvo em alguns casos específicos, como quando você quer pegar um link: a função que dá <em>echo</em> é a <code>the_permalink()</code>. E a função que retorna é a <code>get_permalink()</code>. O recomendado é SEMPRE - Quando eu disse mesmo? SEMPRE! - <a href="http://codex.wordpress.org/Template_Tags" target="_blank" rel="external">consultar o Codex</a> quando você tiver dúvidas :)</p>
<p>Explicadas as <em>template tags</em>, vamos aos <em>hooks</em>!</p>
<p>Temos dois formatos de hooks que podemos utilizar: <code>actions</code> e <code>filters</code>.</p>
<p>A sintaxe para usá-los é a seguinte:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add_action( <span class="string">'hook_name'</span>, <span class="string">'function_callback'</span> );</div><div class="line">add_filter( <span class="string">'hook_name'</span>, <span class="string">'function_callback'</span> );</div></pre></td></tr></table></figure>

<p><em>Pra que servem as duas funções?</em></p>
<h2 id="Actions">Actions</h2>
<p>De uma forma bem resumida: as <em>actions</em> “dão <em>echo</em>“ em valores, ou não precisam retornar nada. Você passa como primeiro parâmetro da função <code>add_action</code> o nome do <code>hook</code> onde será executada a <em>função de callback</em>, passada no segundo parâmetro.</p>
<p>Lembra que utlizamos o <em>hook</em> <code>after_setup_theme</code> no nosso <code>functions.php</code>, para adicionar suporte às thumbnails? Vamos lembrar como nós fizemos? Olha só o nosso <code>functions.php</code> atualizado:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-single.php'</span>;</div><div class="line">  </div><div class="line">add_action( <span class="string">'after_setup_theme'</span>, <span class="string">'setup_features'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup_features</span><span class="params">()</span> </span>{</div><div class="line">    add_theme_support( <span class="string">'post-thumbnails'</span> );     </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Isso significa que, em algum lugar do código do <strong>WordPress</strong>, existe o gancho <code>after_setup_theme</code>, que deve executar após o <code>setup</code> do tema, como o próprio nome diz :P</p>
<p>Com o <code>add_action</code>, nós “penduramos” nesse gancho a função <code>setup_features</code>. Quando esse gancho for executado, nossa função também será :D</p>
<p>Para criar um gancho para uma <code>action</code>, nós usamos a função <code>do_action()</code>.</p>
<p>Por exemplo: se você colocar em qualquer lugar do seu código um <code>do_action( &#39;nada&#39; )</code>, você acabou de deixar um gancho ali.<br>Você pode pendurar qualquer coisa nesse gancho, a partir de qualquer outra parte do seu código, usando: </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_action( <span class="string">'nada'</span>, <span class="string">'funcao_callback'</span> );</div></pre></td></tr></table></figure>

<p>Deu pra entender até aqui?</p>
<h2 id="Filters">Filters</h2>
<p>E os <code>filters</code>, são ganchos que retornam valores.</p>
<p>Quando você usa:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_filter( <span class="string">'hook_name'</span>, <span class="string">'function_callback'</span> );</div></pre></td></tr></table></figure>

<p>A sua função de callback deve sempre ter um <code>return</code> no final, retornando um valor qualquer, mas NUNCA um <em>echo</em>.</p>
<p><em>Por que?</em></p>
<p>Porque os ganchos para <code>filters</code> são atribuídos à variáveis, ou então, onde é deixado o gancho, ele já tem um <code>echo</code> antes. A função que deixa o gancho para <code>filters</code> é a <code>apply_filters</code>.</p>
<p>Então, normalmente você vai ter algo assim:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wp_content</span> = apply_filters( <span class="string">'the_content'</span>, <span class="string">'content_default'</span> );</div></pre></td></tr></table></figure>

<p>Então, quando você usar: </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_filter( <span class="string">'the_content'</span>, <span class="string">'callback_function'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback_function</span><span class="params">( <span class="variable">$content_default</span> )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'content'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>O valor retornado pela função será passado para a variável <code>$wp_content</code>. Perceba o segundo parâmetro nessa função: ele é o valor padrão que a variável vai receber. Ou seja, se não tiver nada “pendurado” nesse gancho, <code>$wp_content</code> irá receber o valor <code>&#39;content_default&#39;</code>. Perceba na nossa função de callback que, os parãmetros adicionais que passamos em <code>apply_filters()</code> (sim, pode ter mais de um), são transferidos como parâmetros da função de callback :D</p>
<p>Agora vamos ver como isso se aplica na prática! Como usar no nosso tema?</p>
<h2 id="Usando_o_hook_no_nosso_template">Usando o hook no nosso template</h2>
<p>No nosso <code>single.php</code>, nós iremos trocar a linha:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$single_post</span> = <span class="keyword">new</span> Controller_Single();</div></pre></td></tr></table></figure>

<p>Pelo seguinte código:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">the_post();</div><div class="line"><span class="variable">$single_post</span> = apply_filters( <span class="string">'get_single_content'</span>, <span class="keyword">false</span> );</div></pre></td></tr></table></figure>

<p>Primeiro chamamos <code>the_post()</code>, pois o WP só irá usar esse template se um post existir. Então já chamamos a função <code>the_post()</code> para que possamos utilizar as <code>template_tags()</code> apontando as informações para o post em questão. Devemos sempre deixar a chamada do <code>post()</code> no arquivo de template principal, pois isso garante que, se tivermos partials, as <code>template_tags()</code> funcionarão também nessas partials.</p>
<p>Pronto! Deixamos um gancho na nossa <em>view</em> <code>single.php</code>, que irá receber todo o conteúdo que precisamos para mostrar os dados do post. Isso nos dá uma liberdade muito maior de usar a classe <code>Controller_Single</code> somente para organizar o conteúdo enviado para a view <code>single.php</code>, e trabalhar com outros objetos dentro dessa classe :D</p>
<p>E adivinha onde iremos pendurar código para esse gancho <code>get_single_content</code>?</p>
<p>Isso mesmo! No nosso controller!</p>
<p>Vamos então mudar um pouco a estrutura do <code>Controller_Single.php</code>. Deixe assim nosso métod <code>__construct()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../security.php'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller_Single</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>{</div><div class="line">        add_filter( <span class="string">'get_single_content'</span>, <span class="keyword">array</span>( <span class="variable">$this</span>, <span class="string">'get_single_content'</span> ) );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E, no final do arquivo, instancie a classe:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Controller_Single();</div></pre></td></tr></table></figure>

<p>Quando o arquivo for executado, a classe será instanciada automaticamente, e o gancho <code>get_single_content</code>, que está em <code>__construct()</code>, será ativado. Então, somente quando for encontrado o <code>apply_filters( &#39;get_single_content&#39; )</code>, é que a função passada no segundo parâmetro será executada.</p>
<p><em>Perae, mas você falou que o segundo parâmetro deveria ser o nome de uma função! Por que você passou um array?</em></p>
<p>Porque nós queremos usar um método da classe <code>Controller_Single</code>. Quando trabalhamos com orientação a objetos no PHP, sempre que precisamos passar uma função como <code>String</code>, que será executada em um momento futuro, nós usamos um array, passando no primeiro parâmetro o nome da classe em formato de <code>String</code> ou, se for um método da classe que você está, pode usar o <code>$this</code> para referenciar essa classe.</p>
<p>Fazer isso é o mesmo que dizer:</p>
<p><em>Ao encontrar o gancho <strong>get_single_content</strong>, execute o método <code>$this-&gt;get_single_content()</code></em>.</p>
<p>Agora, vamos pegar o conteúdo do post mesmo. Ainda na classe <code>Controller_Single</code>, crie um método público, chamado <code>get_single_content</code> (sim, o mesmo nome do gancho para facilitar encontar depois).</p>
<p>Nesse método, você vai então fazer o loop, ou retornar as informações que você montou na sua interface, no arquivo <code>single.php</code>. Então, faça isso no controller <code>Controller_Single</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_single_content</span><span class="params">()</span> </span>{</div><div class="line">    <span class="variable">$single_content</span> = <span class="keyword">new</span> StdClass();</div><div class="line">    <span class="variable">$single_content</span><span class="variable">-&gt;thumbnail</span> = has_post_thumbnail() ? get_the_post_thumbnail() : <span class="string">''</span>;</div><div class="line">    <span class="variable">$single_content</span><span class="variable">-&gt;title</span> = get_the_title();</div><div class="line">    <span class="variable">$single_content</span><span class="variable">-&gt;content</span> = get_the_content();</div><div class="line">    <span class="keyword">return</span> <span class="variable">$single_content</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>A classe <code>StdClass()</code> que você pode ver sendo instanciada ali, é uma classe parão do PHP, em branco, para que você possa criar objetos rapidamente, sem precisar criar uma nova classe.</p>
<p>Perceba que a lógica do <code>post_thumbnail</code> nós fizemos ali no <em>controller</em>. Nada de lógica na view! Se precisamos testar qualquer coisa, que seja no <em>controller</em>, ou, se o projeto começar a ficar muito grande, separar os controllers em <em>services</em>.</p>
<p>Executando agora nosso site, podemos ver que tudo funciona como deveria!</p>
<p>Essa é a forma que eu uso hoje para separar responsabilidades! Gostou? Achou fácil? Difícil? Quero saber sua opinião, e como você estrutura seus temas no WP! Comente! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/</a></p>
<p><strong> Próximo post:</strong><br><a href="">EM BREVE!</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-controller.jpg" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">post anterior</a>, criamos a interface para nossa view. Hoje veremos como criar a base que vai controlar o conteúdo retornado! Vem comigo? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Separando as responsabilidades]]></title>
    <link href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/"/>
    <id>http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/</id>
    <published>2015-02-10T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-responsability-separator.jpg" alt=""></p>
<p>Vamos começar a organizar melhor nosso tema, separando as responsabilidades. Tiraremos toda a lógica da view, e trataremos em <em>controllers</em> separados. Vamos ver como isso fica na prática? ;)</p>
<a id="more"></a>

<p>Pra começar, acompanhe o tema que estamos desenvolvendo juntos: <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br</a></p>
<p>A grande vantagem de trabalhar com o WordPress, é que ele não nos prende a uma estrutura específica. Precisamos seguir algumas convenções, mas podemos facilmente organizar nossos arquivos e separar como cada coisa é feita de forma bem fácil.</p>
<p>Esse formato que vou mostrar hoje, é como eu uso nos meus projetos. É importante que fique claro que, existem várias formas de fazer o que veremos hoje. Essa não é a forma “absolutamente certa”, mas é como resolve os problemas pra mim.</p>
<p>Chega de lenga-lenga, vamos ao que interessa: código!</p>
<h2 id="Single">Single</h2>
<p>No último post, vimos que, no <strong>WordPress</strong>, temos alguns Tipos de Conteúdo padrão, mas que também podemos criar os nossos próprios. Hoje veremos o template <code>single.php</code>.</p>
<p>Então, antes de qualquer coisa, crie esse arquivo na raiz do seu tema. Nossa estrutura agora deve estar assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── footer.php</div><div class="line">├── /functions</div><div class="line">│   └── security.php</div><div class="line">├── functions.php</div><div class="line">├── header.php</div><div class="line">├── index.php</div><div class="line">├── single.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Fazendo isso, vamos começar a brincadeira! O <code>single.php</code> serve para mostrar uma postagem específica.<br>Quando você acessa a URL de um post, por exemplo, o WordPress procura usa esse template para renderizar o post.</p>
<p>Mas o <code>single.php</code> vai muito além disso: segundo a <a href="http://codex.wordpress.org/Template_Hierarchy" target="_blank" rel="external">hierarquia de templates</a> do <strong>WordPress</strong>, quando você acessa a URL de uma postagem (seja do <em>Post Type</em> “post” ou qualquer outro criado por você), a busca pelo template é feita na seguinte ordem:</p>
<p>Primeiro o <strong>WordPress</strong> procura na raiz da sua aplicação, um arquivo chamado <code>single-{post-type}.php</code>, onde `{post-type} é o nome do seu <em>Post Type</em>.</p>
<p>Exemplo: imagine que você tem um <em>Post Type</em> chamado filmes, e você quer acessar a URL que leva para o filme <strong>The Avengers</strong>. Ao acessar a URL <code>http://seusite.com.br/filmes/the-avengers/</code>, o <strong>WordPress</strong> irá verificar se no seu tema você tem um arquivo chamado <code>single-filmes.php</code>.</p>
<p>Se esse arquivo não existir, o WordPress vai procurar o arquivo <code>single.php</code> (que é o que estamos vendo agora). Se encontrar, é nese arquivo que a postagem será renderizada. Senão, a renderização é feita na <code>index.php</code>.</p>
<p>Perceba que a <code>index.php</code> é o fallback para todos os templates, por isso é importante mantê-la no seu projeto, ainda que você quase não a use, ou use pouco. Fazendo a cópia da <code>index.php</code> na <code>single.php</code>, nossa <code>single</code> deve estar com essa estrutura:</p>
<p><a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br/blob/7e61f6f73153641a438a4b8ca09da7bb9e2361f3/index.php" target="_blank" rel="external">Estrutura da single.php</a></p>
<p>Mantivemos essa estrutura, pois precisamos apenas mostrar um post. Não é necessário o loop aqui, somente as <em>template tags</em>.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Interface">Interface</h2>
<p>Para separar as responsabilidades, não podemos deixar lógica alguma na nossa view. Os templates que o WordPress disponibiliza não deveriam ter nenhuma lógica ou regra de negócio. Isso precisa ficar em arquivos à parte.</p>
<p>No nosso caso, vamos utilizar <em>controllers</em> para nos ajudar a organizar as coisas. Crie no diretório <code>functions/</code>, um outro diretório chamado <code>controllers</code>. E dentro desse diretório, crie um arquivo chamado <code>controller-single.php</code>. A nossa estrutura agora deveria estar assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── footer.php</div><div class="line">├── /functions</div><div class="line">│   ├── /controllers</div><div class="line">│   │   └── controller-single.php</div><div class="line">│   └── security.php</div><div class="line">├── functions.php</div><div class="line">├── header.php</div><div class="line">├── index.php</div><div class="line">├── single.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Cada <em>controller</em> conterá uma <em>classe PHP</em>, que irá responder por uma página específica, ou por URL. No nosso caso, estamos criando primeiramente um controller que vai gerenciar nossa <code>single.php</code>.</p>
<p>Vamos agora fazer algumas mudanças na <code>single.php</code>. Primeiro de tudo, vamos criar nossa interface. Nosso <code>single</code> deve ficar assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'functions/security.php'</span>;</div><div class="line">get_header();</div><div class="line"><span class="preprocessor">?&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$single_post</span><span class="variable">-&gt;thumbnail</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$single_post</span><span class="variable">-&gt;title</span> <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$single_post</span><span class="variable">-&gt;content</span> <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_footer() <span class="preprocessor">?&gt;</span></span></div></pre></td></tr></table></figure>

<p><em>O que é significa “ter uma interface” o por que precisamos de uma?</em></p>
<p>A interface são os métodos e propriedades públicas da classe que vai controlar o conteúdo mostrado na nossa <code>single</code>. Primeiramente nós colocamos na nossa <em>view</em>, o que nós esperamos que seja retornado. </p>
<p>Podemos ver nesse exemplo que:</p>
<ul>
<li>a variável <code>$single_post</code> recebe um objeto;</li>
<li>esperamos que sejam retornadas 3 informações: <code>thumbnail</code>, <code>title</code> e <code>content</code>, como propriedades do objeto <code>$single_post</code>.</li>
</ul>
<p><em>Mas de onde vêm esses dados?</em></p>
<p>Do <em>controller</em>! É ele que vai cuidar de toda a lógica para que nossa <em>view</em> se mantenha assim, limpa! A <em>view</em> deve somente “cuspir” as informações. Nada de zona na view! Nada de lógica de PHP e estruturas gigantes! Vamos separar as responsabilidades para que nosso código fique legível e fácil de editar!</p>
<p>No próximo post, vamos ver como ficará nosso <em>controller</em>, e como ele irá tratar as informações para devolver à <em>view</em>!</p>
<p>Ficou com alguma dúvida? Comente!</p>
<p>Até a próxima! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-responsability-separator.jpg" alt=""></p>
<p>Vamos começar a organizar melhor nosso tema, separando as responsabilidades. Tiraremos toda a lógica da view, e trataremos em <em>controllers</em> separados. Vamos ver como isso fica na prática? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serir temas wordpress" scheme="http://blog.da2k.com.br/tags/serir-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Branches]]></title>
    <link href="http://blog.da2k.com.br/2015/02/09/segredos-do-github-branches/"/>
    <id>http://blog.da2k.com.br/2015/02/09/segredos-do-github-branches/</id>
    <published>2015-02-09T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-branches.png" alt=""></p>
<p>Quando você cria uma nova feature para o seu projeto, normalmente você também cria uma nova branch, e depois faz merge com a branch principal. Depois de um tempo, fica notória a necessidade de comparar as alterações que foram feitas. </p>
<p><em>Existe uma forma fácil de fazer isso com o <strong>Github</strong></em>? Adivinha? ;)</p>
<a id="more"></a>

<p>Na página do seu repositório, você pode ver todas as branches clicando no link <strong>Branches</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/branches.png" alt=""></p>
<p>Clicando nesse link, você tem a lista com todas as branches do seu projeto. Por aqui, você consegue acessar a página de comparação de branches ou deletar uma branch com o clique de um botão.</p>
<h2 id="Comparando_branches">Comparando branches</h2>
<p>Para comparar alterações feitas em branches diferentes, você pode fazer direto pela URL, acessando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/{range}</div></pre></td></tr></table></figure>

<p>Onde, no <code>{range}</code>, você troca pela branch principal, seguida de 3 pontos, e logo após, o nome da branch que você quer comparar. Por exemplo: nesse caso, quero ver quais alterações existem na branch <code>repeat</code>, que ainda não tem na <code>master</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master...repeat</div></pre></td></tr></table></figure>

<p><img src="http://blog.da2k.com.br/uploads/2015/02/compare-branches.png" alt=""></p>
<p>Fazendo isso, se for possível, eu já vou ver um botão de <em>Pull Request</em>, para que eu possa enviar a sugestão de fazer marge direto na <code>master</code>. Consigo ver também os commits de quem fez as alterações e quais arquivos foram alterados :D</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Comparando_a_mesma_branch_por_data">Comparando a mesma branch por data</h2>
<p>Também é possível comparar a mesma branch, mas com uma data anterior:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">30</span>.days.ago}...master</div></pre></td></tr></table></figure>

<p>Acessando a URL acima, eu consigo ver quais foram as alterações que ocorreram nos últimos 30 dias na branch master! Isso pode ser útil para você preencher o seu <em>changelog</em>, pois dá pra saber todas as mudanças que foram feitas nesse período de tempo :D</p>
<p>Podemos usar também com o formato de data - <code>YYYY-DD-MM</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">2014.25</span>.<span class="number">12</span>}...master</div></pre></td></tr></table></figure>

<p>Agora eu sei tudo que foi alterado desde o natal de 2014 :D</p>
<h2 id="visualizações_diff_e_patch">visualizações diff e patch</h2>
<p>Você ainda pode usar as comparações nos formatos <code>diff</code> e <code>patch</code>, colocando essa “extensão” no final da URL:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">2014.25</span>.<span class="number">12</span>}...master.diff</div><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">2014.25</span>.<span class="number">12</span>}...master.patch</div></pre></td></tr></table></figure>

<h2 id="Comparando_branches_de_repositórios_forkados">Comparando branches de repositórios forkados</h2>
<p>Agora, você forkou um projeto, criou uma nova branch e desenvolveu uma nova feature, ou arrumou um bug. Como fazer a comparação com o repositório original?</p>
<p>Simples! Só fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/{user-original-repo}:{branch}...{own-branch}</div></pre></td></tr></table></figure>

<p>Onde:</p>
<ul>
<li><code>{user-original-repo}</code> é o usuário do repositório original e <code>{branch}</code> que vem logo após ele, é a branch no repositório original;</li>
<li><code>{own-branch}</code> é a branch no seu repositório, que você quer comparar.</li>
</ul>
<p>No caso do Odin, que eu forkei, eu quero comparar a minha master, com a master do projeto original. Eu posso fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/fdaciuk/odin/compare/wpbrasil:master...master</div></pre></td></tr></table></figure>

<p>Claro que, para todas essas ações, você tem botões na interface do <strong>Github</strong> que facilitam a navegação. Mas, em alguns momentos, é muito mais fácil digitar direto na URL do que clicar em um botão xD</p>
<p>Era isso! Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-branches.png" alt=""></p>
<p>Quando você cria uma nova feature para o seu projeto, normalmente você também cria uma nova branch, e depois faz merge com a branch principal. Depois de um tempo, fica notória a necessidade de comparar as alterações que foram feitas. </p>
<p><em>Existe uma forma fácil de fazer isso com o <strong>Github</strong></em>? Adivinha? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="braches" scheme="http://blog.da2k.com.br/tags/braches/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Aprenda Markdown]]></title>
    <link href="http://blog.da2k.com.br/2015/02/08/aprenda-markdown/"/>
    <id>http://blog.da2k.com.br/2015/02/08/aprenda-markdown/</id>
    <published>2015-02-08T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/markdown.png" alt=""></p>
<p><strong>Markdown</strong> é uma ferramenta de conversão de <em>text-to-HTML</em>. Com ele é possível você marcar títulos, listas, tabelas, etc., de forma muito mais limpa, legível e precisa, do que se fosse fazer com HTML.<br>Ainda não sabe tudo o que é possível fazer com Markdown? Então esse post é pra você! Vem comigo que eu te mostro :)</p>
<a id="more"></a>

<h2 id="Onde_usar_Markdown">Onde usar Markdown</h2>
<p>Existem vários lugares que você pode usar <strong>Markdown</strong>: No <strong>Github</strong> mesmo, você pode usar no <em>README.md</em>, que é um arquivo que fica na raiz do seu projeto, e é renderizado pelo <strong>Github</strong> abaixo da lista de arquivos. Aquele texto que você lê quando acessa um repositório é um arquivo <em>README.md</em>, escrito em <strong>Markdown</strong>.</p>
<p>Ainda no <strong>Github</strong>, você pode usar <strong>Markdown</strong> no texto das issues, no texto de um <em>pull request</em> e na <em>wiki</em>.</p>
<p>Também a maior parte dos <a href="https://www.staticgen.com/" target="_blank" rel="external">geradores de estáticos</a> (Hexo, Jekyll, HarpJS, Docpad, etc.), permitem escrever em <strong>Markdown</strong>! É uma ótima oportunidade pra você que queria começar o seu blog, mas estava com preguiça de usar um CMS ou ficar fazendo HTML na mão xD</p>
<h2 id="Porque_eu_devo_aprender_e_usar_Markdown">Porque eu devo aprender e usar Markdown</h2>
<p>Porque HTML é muito verboso! <strong>Markdown</strong> é mais legível, mais fácil de ler e interpretar.</p>
<h2 id="Devo_parar_de_escrever_HTML_para_sites_e_fazer_tudo_em_Markdown?">Devo parar de escrever HTML para sites e fazer tudo em Markdown?</h2>
<p>Não! <strong>Markdown</strong> serve basicamente para escrever textos. Como toda ferramenta, ele tem algumas desvantagens com relação à escrever em HTML:</p>
<ul>
<li>Você não consegue colocar atributos nos elementos (class, id, title, etc.), além dos poucos que ele permite por padrão;</li>
<li>Você não tem muito controle para fazer aninhamento de tags.</li>
</ul>
<p>Por isso é importante frisar que o uso do <strong>Markdown</strong> deve ser especificamente para a escrita de textos, artigos de blog, etc. Não é para simplesmente usá-lo no lugar do HTML!</p>
<h2 id="Como_eu_começo_a_escrever_em_Markdown">Como eu começo a escrever em Markdown</h2>
<p>Se você já tiver um <em>parser</em>, você só precisa criar um arquivo com uma dessas extensões: mark, markdown, md, mdml, mdown, text, mdtext, mdtxt, mdwn, mkd, mkdn.</p>
<p>Entre essas, a mais utilizada é a <em>md</em>. Crie um arquivo com uma dessas extensões e você já estará apto para começar a escrever em <strong>Markdown</strong>!</p>
<p>Agora, se você não tiver um <em>parser</em>, pode usar uma ferramenta online. Existem muitas ferramentas de <em>parse</em> de <strong>Markdown</strong> para <strong>HTML</strong>. Vou recomendar uma para que você possa acompanhar esse post, mas buscando por <strong>Markdown Editor</strong> no Google, você vai encontrar muitas outras!</p>
<p>Gosto bastante do <a href="https://stackedit.io/editor" target="_blank" rel="external">Stack Edit</a>. Ele converte <strong>Markdown</strong> para <strong>HTML</strong> enquanto você digita. É bastante simples para ver o resultado :)</p>
<p>Vamos aprender então como escrever em <strong>Markdown</strong>!</p>
<h2 id="Tìtulos_(&lt;h1&gt;_a_&lt;h6&gt;)">Tìtulos (<code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code>)</h2>
<p>Para marcar um título, você vai usar <code>#</code> a quantidade de vezes que irá representar o nível do título. Exemplo:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Título nível 1</span></div><div class="line"><span class="header">## Título nível 2</span></div><div class="line"><span class="header">### Título nível 3</span></div><div class="line"><span class="header">#### Título nível 4</span></div><div class="line"><span class="header">##### Título nível 5</span></div><div class="line"><span class="header">###### Título nível 6</span></div></pre></td></tr></table></figure>

<p>Parseia para:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Título nível 1<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>Título nível 2<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>Título nível 3<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h4</span>&gt;</span>Título nível 4<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h5</span>&gt;</span>Título nível 5<span class="tag">&lt;/<span class="title">h5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h6</span>&gt;</span>Título nível 6<span class="tag">&lt;/<span class="title">h6</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Bastante simples, não? O <code>h1</code> e o <code>h2</code> ainda podem ser escritos da seguinte forma:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="header">Título de nível 1</span></div><div class="line">==================</div><div class="line">  </div><div class="line"><span class="header">Título de nível 2</span></div><div class="line">------------------</div></pre></td></tr></table></figure>

<h2 id="Parágrafos_e_quebras_de_linha_(&lt;p&gt;_e_&lt;br_/&gt;)">Parágrafos e quebras de linha (<code>&lt;p&gt;</code> e <code>&lt;br /&gt;</code>)</h2>
<p>Para gerar parágrafos, basta você escrever o texto em uma linha:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Este é um parágrafo.</div><div class="line">  </div><div class="line">Este é outro parágrafo.</div></pre></td></tr></table></figure>

<p>Isso gera:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Este é um parágrafo.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Este é outro parágrafo.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Note que eu pulei uma linha entre os parágrafos. Se eu não fizesse isso, o código gerado seria:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Este é um parágrafo. Este é outro parágrafo.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p><em>Mas ele não deveria usar um `<br> para quebrar linha?</em></p>
<p>Isso é muito particular de cada parser. Alguns quebram linha quando você dá enter. Mas a documentação do <strong>Markdown</strong> diz que, para quebras de linha, você precisa deixar dois espaços no final da linha:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Primeira linha do parágrafo.··</div><div class="line">Segunda linha do parágrafo.</div></pre></td></tr></table></figure>

<p>Coloquei o <code>··</code> no final da primeira linha somente para facilitar a visualização. Você deve substituir esse símbolo por dois espaços em branco. Isso deve gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  Primeira linha do parágrafo.<span class="tag">&lt;<span class="title">br</span> /&gt;</span></div><div class="line">  Segunda linha do parágrafo.</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Por isso, se você estiver usando o <a href="http://editorconfig.org/" target="_blank" rel="external">.editorconfig</a> no seu projeto, deixe a opção <code>trim_trailing_whitespace</code> como <code>false</code> para arquivos <strong>Markdown</strong>. Assim, os espaços adicionais não serão removidos :)</p>
<h2 id="Ênfase_(&lt;strong&gt;_e_&lt;em&gt;)">Ênfase (<code>&lt;strong&gt;</code> e <code>&lt;em&gt;</code>)</h2>
<p>Para enfatizar uma palavras (<code>&lt;em&gt;</code>), usamos um <code>*</code> ou <code>_</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Javascript é <span class="emphasis">_cool_</span>!</div></pre></td></tr></table></figure>

<p>ou:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Javascript é <span class="emphasis">*cool*</span>!</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  Javascript é <span class="tag">&lt;<span class="title">em</span>&gt;</span>cool<span class="tag">&lt;/<span class="title">em</span>&gt;</span>!</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>O mais utilizado para ênfase (<code>&lt;em&gt;</code>) é o <em>underline</em>.</p>
<p>Para dar forte ênfase em palavras (<code>&lt;strong&gt;</code>), você usa dois <code>**</code> ou <code>__</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**Da2k**</span> é a pronúncia para <span class="strong">**Daciuk**</span>: DA-TWO-K!</div></pre></td></tr></table></figure>

<p>ou </p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="strong">__Da2k__</span> é a pronúncia para <span class="strong">__Daciuk__</span>: DA-TWO-K!</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">strong</span>&gt;</span>Da2k<span class="tag">&lt;/<span class="title">strong</span>&gt;</span> é a pronúncia para <span class="tag">&lt;<span class="title">strong</span>&gt;</span>Daciuk:<span class="tag">&lt;/<span class="title">strong</span>&gt;</span> DA-TWO-K!</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>O mais utilizado para forte ênfase (<code>&lt;strong&gt;</code>) são dois asteriscos.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Links_(&lt;a&gt;)">Links (<code>&lt;a&gt;</code>)</h2>
<p>Para gerar links, você usa <code>[]()</code>. Dentro dos colchetes você coloca o texto do link, e dentro dos parênteses, você coloca a URL:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_label">Blog do Da2k</span>](<span class="link_url">http://blog.da2k.com.br</span>)</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://blog.da2k.com.br"</span>&gt;</span>Blog do Da2k<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Passando um texto após a URL, separando o link do texto por um espaço em branco, esse texto será usado como <code>title</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_label">Blog do Da2k</span>](<span class="link_url">http://blog.da2k.com.br "Clique e acesse agora!"</span>)</div></pre></td></tr></table></figure>

<p>Vai gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://blog.da2k.com.br"</span> <span class="attribute">title</span>=<span class="value">"Clique e acesse agora!"</span>&gt;</span>Blog do Da2k<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Links_automáticos">Links automáticos</h2>
<p>Se o texto do seu link é o próprio link, você pode envolvê-lo entre <code>&lt;</code> e <code>&gt;</code>, que o link será gerado automaticamente:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">https:</span>//<span class="attribute">www.google.com.br</span>&gt;</span></span></div></pre></td></tr></table></figure>

<p>Irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"https://www.google.com.br"</span>&gt;</span>https://www.google.com.br<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E isso funciona também para e-mails:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">meu@email.com</span>&gt;</span></span></div></pre></td></tr></table></figure>

<p>Vai gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"mailto:meu@email.com"</span>&gt;</span>meu@email.com<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Da hora, não? ;)</p>
<h2 id="Referências">Referências</h2>
<p>Expliquei sobre referências <a href="http://blog.da2k.com.br/2015/01/16/segredos-do-github-variaveis/" target="_blank" rel="external">nesse post</a>.</p>
<h2 id="Blocos_de_citação_(&lt;blockquote&gt;)">Blocos de citação (<code>&lt;blockquote&gt;</code>)</h2>
<p>Para criar blocos de citação, você usa o sinal de <code>&gt;</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="blockquote">&gt; Esse é um bloco de citação.</span></div><div class="line"><span class="blockquote">&gt; Ele pode ter várias linhas por parágrafo.</span></div><div class="line"><span class="blockquote">&gt;</span></div><div class="line">&gt; Inclusive, dando um espaço, você tem um novo parágrafo.</div></pre></td></tr></table></figure>

<p>Que gera o seguinte:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">blockquote</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">    Esse é um bloco de citação.</div><div class="line">    Ele pode ter várias linhas.</div><div class="line">  <span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Inclusive, uma quebra de linha.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Listas_(&lt;ul&gt;_e_&lt;ol&gt;)">Listas (<code>&lt;ul&gt;</code> e <code>&lt;ol&gt;</code>)</h2>
<p>Para listas não ordenadas (<code>&lt;ul&gt;</code>), você pode usar <code>*</code>, <code>+</code> ou <code>-</code>. Veja:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>Item 1</div><div class="line"><span class="bullet">* </span>Item 2</div><div class="line"><span class="bullet">* </span>Item 3</div><div class="line">  </div><div class="line"><span class="bullet">+ </span>Item 1</div><div class="line"><span class="bullet">+ </span>Item 2</div><div class="line"><span class="bullet">+ </span>Item 3</div><div class="line">  </div><div class="line"><span class="bullet">- </span>Item 1</div><div class="line"><span class="bullet">- </span>Item 2</div><div class="line"><span class="bullet">- </span>Item 3</div></pre></td></tr></table></figure>

<p>Os três formatos acima geram a mesma marcação:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E para listas ordenadas, você usa o número, seguido de ponto:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Item 1</div><div class="line"><span class="bullet">2. </span>Item 2</div><div class="line"><span class="bullet">3. </span>Item 3</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ol</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ol</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Alguns parsers renderizam automaticamente os próximos números, após o 1. Você só precisa usar <code>*</code> para os itens do 2 em diante:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Item 1</div><div class="line"><span class="bullet">* </span>Item 2</div><div class="line"><span class="bullet">* </span>Item 3</div></pre></td></tr></table></figure>

<p>Mas não são todos que renderizam dessa forma, então é bom ficar ligado ;)</p>
<h2 id="Imagens_(&lt;img_/&gt;)">Imagens (<code>&lt;img /&gt;</code>)</h2>
<p>Geração de imagens é bem parecido com a geração de links: você só precisa adicionar uma <code>!</code> no início. E o texto que você coloca entre os colchetes, é usado como <code>alt</code> na imagem:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Banana</span>](<span class="link_url">http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif</span>)</div></pre></td></tr></table></figure>

<p>Esse código vai gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif"</span> <span class="attribute">alt</span>=<span class="value">"Banana"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>O <code>title</code> também funciona como no link:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Banana</span>](<span class="link_url">http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif "Olha a banana dançando!"</span>)</div></pre></td></tr></table></figure>

<p>Que gera:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif"</span> <span class="attribute">alt</span>=<span class="value">"Banana"</span> <span class="attribute">title</span>=<span class="value">"Olha a banana dançando!"</span> /&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Tabelas_(&lt;table&gt;)">Tabelas (<code>&lt;table&gt;</code>)</h2>
<p>Já falei sobre tabelas em um <a href="http://blog.da2k.com.br/2015/01/17/segredos-do-github-tabelas-e-task-lists/" target="_blank" rel="external">post anterior</a>. Nesse post eu falo também sobre as <code>task lists</code>, mas elas são específicas do <strong>Github</strong>, não funcionam com qualquer parser ;)</p>
<h2 id="Código_inline_e_bloco_(&lt;code&gt;_e_&lt;pre&gt;)">Código inline e bloco (<code>&lt;code&gt;</code> e <code>&lt;pre&gt;</code>)</h2>
<p>Vocế ainda pode adicionar trechos de código via <strong>Markdown</strong>. Para adicionar código a nível <em>inline</em>, você usa ```:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O <span class="code">`&lt;blockquote&gt;`</span> é uma tag HTML.</div></pre></td></tr></table></figure>

<p>Isso irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  O <span class="tag">&lt;<span class="title">code</span>&gt;</span>&lt;blockquote&gt;<span class="tag">&lt;/<span class="title">code</span>&gt;</span> é uma tag HTML!</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E para gerar blocos de código, você simplesmente indenta o código 4 espaços (ou 1 tab) à frente do paràgrafo:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Essa é a função sayHello():</div><div class="line"><span class="code">    function sayHello() {</span></div><div class="line"><span class="code">      return 'hi!';</span></div><div class="line"><span class="code">    }</span></div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  Essa é a função sayHello():</div><div class="line">  <span class="tag">&lt;<span class="title">pre</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>function sayHello() {</div><div class="line">    return 'hi!';</div><div class="line">  }<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Isso é como está na documentação. Mas a maior parte dos parses que eu conheço não funcionam dessa forma. Eles geram blocos de código usando três crases no início da primeira e última linha, para marcar o início e o fim do bloco:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/code-block.png" alt=""></p>
<p>PS.: Tive que colocar como imagem, pois o meu parser não consegue escapar as 3 crases ¬¬</p>
<p>O <strong>Github</strong> inclusive <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code" target="_blank" rel="external">recomenda que se use as 3 crases</a>, pois é mais fácil de visualizar e dar manutenção no código.</p>
<p>No <strong>Github</strong>, você ainda consegue definir qual a linguagem que está sendo utilizada, para que seja feito <em>code highlight</em> no seu código. Só passe a linguagem após as 3 crases, dessa forma:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/code-block-language.png" alt=""></p>
<p>Que ó seu código será mostrado bonitinho assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/code-block-highlighted.png" alt=""></p>
<p>:D</p>
<h2 id="Backslash_scapes">Backslash scapes</h2>
<p>Para escapar caracteres que são parseados pelo <strong>Markdown</strong>, você pode usar a barra invertida <code>\</code> (<em>backslash</em>), seguida do caractere, para imprimí-lo literalmente. O escape funciona para os caracteres listados abaixo:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\   backslash (barra invertida)</div><div class="line">`   backtick (crase)</div><div class="line"><span class="bullet">*   </span>asterisk (asterisco)</div><div class="line">_   underscore</div><div class="line">{}  curly braces (chaves)</div><div class="line">[]  square brackets (colchetes)</div><div class="line">()  parentheses (parênteses)</div><div class="line"><span class="header">#   hash mark (sustenido / hash / jogo da velha)</span></div><div class="line"><span class="bullet">+   </span>plus sign (sinal de "mais" ou somar)</div><div class="line"><span class="bullet">-   </span>minus sign (hyphen) (sinal de menos ou hífen)</div><div class="line">.   dot (ponto)</div><div class="line">!   exclamation mark (ponto de exclamação)</div></pre></td></tr></table></figure>

<p>Além de tudo isso, é importante saber também, que é possível usar HTML junto com <strong>Markdown</strong>! Isso mesmo! Se você precisar adicionar uma classe em uma imagem para alinhar, ou colocar uma cor específica em alguma palavra, você pode usar tags HTML normalmente :D</p>
<p>Para saber mais sobre <strong>Markdown</strong>, recomendo a leitura da documentação oficial:<br><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">http://daringfireball.net/projects/markdown/</a></p>
<p>E alguns links de como o <strong>Github</strong> usa <strong>Markdown</strong>:<br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">https://help.github.com/articles/markdown-basics/</a><br><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">https://help.github.com/articles/github-flavored-markdown/</a><br><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">https://guides.github.com/features/mastering-markdown/</a><br><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></p>
<p>E você: o que já faz hoje com <strong>Markdown</strong>? Tem algo diferente do que foi visto nesse post para compartilhar? Ficou com alguma dúvida? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/markdown.png" alt=""></p>
<p><strong>Markdown</strong> é uma ferramenta de conversão de <em>text-to-HTML</em>. Com ele é possível você marcar títulos, listas, tabelas, etc., de forma muito mais limpa, legível e precisa, do que se fosse fazer com HTML.<br>Ainda não sabe tudo o que é possível fazer com Markdown? Então esse post é pra você! Vem comigo que eu te mostro :)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="markdown" scheme="http://blog.da2k.com.br/categories/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - assistindo mudanças no DOM sem temporizadores]]></title>
    <link href="http://blog.da2k.com.br/2015/02/07/javascript-assistindo-mudancas-no-dom-sem-temporizadores/"/>
    <id>http://blog.da2k.com.br/2015/02/07/javascript-assistindo-mudancas-no-dom-sem-temporizadores/</id>
    <published>2015-02-07T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/Oo.png" alt=""></p>
<p>Existem basicamente duas formas de ouvir mudanças em um elemento no DOM: ou você usa eventos, ou, em casos mais extremos, temporizadores.</p>
<p><em>Como saber quando um atributo de um elemento mudou? Como saber se os filhos de um elemento foram alterados? Não tem outra forma de fazer, que não seja usando temporizadores?</em></p>
<p>Sim, tem! E é isso que eu quero mostrar nesse post! Vem comigo :D</p>
<a id="more"></a>

<p>Quando uma ação é executada em algum elemento do DOM (click, mouseenter, mousedown, etc.), é possível atribuir um evento a esse elemento, que irá disparar uma função de callback para que você possa manipular o elemento no momento certo.</p>
<p>Mas, e quando temos, por exemplo, uma mudança de atributo? Ou ainda, uma mudança na árvore do DOM, onde você precisa saber exatamente quando esses eventos ocorrem para tomar alguma decisão? Como fazer?</p>
<p>Provavelmente você logo pensa: </p>
<p><em><a href="http://blog.da2k.com.br/2015/01/29/javascript-usando-temporizadores-like-a-ninja/" target="_blank" rel="external">Temporizadores</a>! Vou usar um <code>setInterval()</code> ou um <code>setTimeout()</code> recursivo, e, a cada x milissegundos, eu executo uma função :D</em></p>
<p>Funciona, mas não é a melhor solução. Se você tiver muitos temporizadores executando juntos, você pode acabar deixando sua aplicação lenta, e até travar o navegador do usuário!</p>
<p><em>Como eu posso então resolver isso de forma elegante?</em></p>
<h2 id="MutationObserver">MutationObserver</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" target="_blank" rel="external">MutationObserver</a> nos dá um caminho para reagir à mudanças no DOM. Ele foi projetado para substituir o <a href="https://developer.mozilla.org/en-US/docs/DOM/Mutation_events" target="_blank" rel="external">Mutation Events</a>, que foi definido na especificação de Eventos do DOM 3.</p>
<p>O <code>MUtationObserver</code> é um construtor, e funciona de forma parecida com o <code>addEventListener</code>, com a diferença que ele não é atribuído mais de uma vez por elemento, se for utilizada a mesma instância.</p>
<p>Com o <code>addEventListener</code>, se você atribuir duas vezes um listener para o evento de <code>click</code>, ao clicar nesse elemento, a função de callback será disparada duas vezes. Isso não acontece com o <code>MutationObserver</code>. Independente de quantas vezes você atribuí-lo ao mesmo elemento, o callback executará só uma vez.</p>
<h2 id="Construtor">Construtor</h2>
<p>Para começarmos a observar as mudanças em um elemento, primeiro precisamos instanciar o construtor:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver( callback );</div></pre></td></tr></table></figure>

<p>A função de <em>callback</em> é executada a cada mudança no DOM, e ela pode receber dois argumentos: o primeiro é um array de objetos, cada um do tipo <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationRecord" target="_blank" rel="external">MutationRecord</a>. O segundo é uma instância do <code>MutationObserer</code>.</p>
<h2 id="Métodos_da_instância">Métodos da instância</h2>
<h3 id="observe()"><code>observe()</code></h3>
<p>O <code>observe()</code> registra a instância do <code>MutationObserver</code> para receber notificações do DOM para um nó específico:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.observe( target, options );</div></pre></td></tr></table></figure>

<p><strong>Parâmetro target</strong>:</p>
<p>O <code>target</code> é o nó que será observado por mudanças.</p>
<p>O <code>options</code> é um objeto que especifíca as mudanças que devem ser observadas.</p>
<p>Por exemplo:</p>
<p>Se eu quiser verificar quando um nó descendente (filho) for adicionado ou removido, ou quando um atributo for adicionado / alterado ou removido, eu posso usar da seguinte maneira:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mydiv"</span> <span class="attribute">data-js</span>=<span class="value">"div"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="div"]'</span> );</div><div class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver( handleMutationObserver );</div><div class="line"><span class="keyword">var</span> config = { childList: <span class="literal">true</span>, attributes: <span class="literal">true</span> };</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMutationObserver</span><span class="params">( mutations )</span> </span>{</div><div class="line">  mutations.forEach(<span class="function"><span class="keyword">function</span><span class="params">(mutation)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( mutation.type );</div><div class="line">  });</div><div class="line">}</div><div class="line">  </div><div class="line">observer.observe( target, config );</div></pre></td></tr></table></figure>

<p>No meu HTML, adicionei uma div com um atributo <code>data-js=&quot;div&quot;</code> e uma classe <code>mydiv</code>.</p>
<p>No JS, atribuímos esse nó para a variável <code>target</code>.<br>A variável <code>observer</code> será nosso observador. Então instanciamos o <code>MutationObserver</code> nessa varíável, passando como parâmetro a função de callback <code>handleMutationObserver</code>.</p>
<p>Depois criamos mais uma variável que receberá as configurações do que deve ser observado no elemento.<br><code>childList</code> verifica mudanças nos filhos do nó correspondente. Se algum nó for adicionado ou removido do nó principal (<code>target</code>), será disparada a função de callback. Isso é válido também para nós de texto, não precisa ser somente tags.</p>
<p><code>attributes</code> observa os atributos do elemento. Se algo mudar, o callback também é disparado.</p>
<p>Para ver todos os parâmetros que você pode utilizar, consulte <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationObserverInit" target="_blank" rel="external">esse link</a>.</p>
<p>Faça o teste, jogando o código acima no seu console! :D<br>Só troque o <code>target</code> para um elemento válido :)</p>
<p>Se você não quiser mais observar um elemento, pode usar o método <code>disconnect()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.disconnect();</div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Compatibilidade_de_browsers">Compatibilidade de browsers</h2>
<p>Por ser algo relativamente novo, o <code>MutationObserver</code> só funciona em browsers modernos:</p>
<ul>
<li>Chrome - 18+;</li>
<li>Firefox - 14+;</li>
<li>IE - 11+;</li>
<li>Opera - 15+;</li>
<li>Safari - 6+;</li>
</ul>
<h2 id="Polyfill">Polyfill</h2>
<p>Para funcionar em todos os browsers, você pode usar um polyfill, feito com temporizadores. Não é o mais recomendado, mas funciona. O polyfill você encontra <a href="https://github.com/megawac/MutationObserver.js" target="_blank" rel="external">nesse link</a>.</p>
<p>É possível fazer muita coisa com o MutationObserver. Recomendo que você dê uma lida na documentação completa dele aqui: <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver</a></p>
<p>Até a próxima! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/Oo.png" alt=""></p>
<p>Existem basicamente duas formas de ouvir mudanças em um elemento no DOM: ou você usa eventos, ou, em casos mais extremos, temporizadores.</p>
<p><em>Como saber quando um atributo de um elemento mudou? Como saber se os filhos de um elemento foram alterados? Não tem outra forma de fazer, que não seja usando temporizadores?</em></p>
<p>Sim, tem! E é isso que eu quero mostrar nesse post! Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="mutation observer" scheme="http://blog.da2k.com.br/tags/mutation-observer/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - o operador void]]></title>
    <link href="http://blog.da2k.com.br/2015/02/06/javascript-o-operador-void/"/>
    <id>http://blog.da2k.com.br/2015/02/06/javascript-o-operador-void/</id>
    <published>2015-02-06T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/undefined.png" alt=""></p>
<p>Você já deve ter visto em alguns links por aí algo como <code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code>, não? Mas você sabe para quê usamos o <code>void</code> em Javascript? E sabe quando podemos usá-lo? Vem descobrir :D</p>
<a id="more"></a>

<p>Segundo a <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="external">documentação da MDN</a>:</p>
<blockquote>
<p>O operador <code>void</code> avalia uma expressão dada, e retorna undefined.</p>
</blockquote>
<p>Ou seja: qualquer valor passado após <code>void</code> será avalidado, mas o valor retornado sempre será <code>undefined</code>.</p>
<p>Vamos ver na prática como isso funciona. Execute no console:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldReturnOne</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line">shouldReturnOne(); <span class="comment">// 1</span></div></pre></td></tr></table></figure>

<p>Agora, se você usar o <code>void</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldReturnUndefined</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line">shouldReturnUndefined(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>O número <code>1</code> é avaliado, mas o valor retornado é <code>undefined</code>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/gente-qual-a-necessidade-disso.jpg" alt=""></p>
<p>Só lembrando que o <code>void</code> não é uma função, e sim um <code>operador</code>. Os parênteses são opcionais.</p>
<p><em>Não daria para retornar direto <code>undefined</code>?</em></p>
<p>Nesse caso, sim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldReturnUndefined</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">}</div><div class="line"></div><div class="line">shouldReturnUndefined(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p><em>Então pra quê eu vou usar o <code>void</code>?</em></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Javascript é uma linguagem de <em>tipagem fraca</em> e <em>dinâmica</em>. Isso significa que você não precisa dizer ao Javascript que uma variável vai receber um número ou uma string, ou que uma função irá retornar um valor booleano.<br>Você simplesmente atribui valores à variáveis e retorna valores em funções, e o Javascript se vira com o resto.</p>
<p>Para entender melhor o <code>void</code>, é necessário entender um pouco sobre tipagem.</p>
<p>Por exemplo: se fossemos escrever um <code>Hello World</code> em Java, ele seria algo assim:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class HelloWorld {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>( String args[] ) {</div><div class="line">    System.out.println( <span class="string">"Hello World!"</span> );</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>O Java é uma linguagem imperativa, orientada a objetos. Por isso é necessário sempre criar uma <code>class</code> para qualquer coisa que você queira fazer. </p>
<p>Mas o que eu quero mostrar está na primeira linha dentro da classe:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>( String args[] )</div></pre></td></tr></table></figure>

<p>Essa linha cria um método estático (<code>static</code>), público (<code>public</code>), chamado <code>main</code>, e que não retorna nada (<code>void</code>). Ou seja: posso colocar qualquer código dentro desse método que será executado normalmente. Agora, seu eu colocar no final desse método um <code>return 1</code>, por exemplo, na hora de tentar compilar, vai dar esse erro:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HelloWorld.java:<span class="number">4</span>: error: incompatible types: unexpected <span class="keyword">return</span> value</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">           ^</div><div class="line"><span class="number">1</span> error</div></pre></td></tr></table></figure>

<p>Porque o Java não espera nenhum valor retornado para esse método.</p>
<p>Enfim, não quero ensinar Java, mas sim mostrar que, para não retornar nenhum valor em linguagens de tipagem forte, é necessário deixar explícito no método o <code>void</code>.</p>
<p>Em Javascript não precisamos disso, mas tem alguns casos em que ele pode vir a ser útil.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillBodyRed</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">document</span>.querySelector( <span class="string">'body'</span> ).style.background = <span class="string">'red'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHypsterStyle</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDOM</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span>( isHypsterStyle() ) {</div><div class="line">    fillBodyRed();</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">handleDOM();</div></pre></td></tr></table></figure>

<p>No exemplo acima, executamos a função <code>handleDOM()</code>, que verifica se <code>isHypsterStyle</code> está setado e chama a função <code>fillBodyRed</code>, que preenche o <code>background</code> do <code>body</code> de vermelho.</p>
<p>A única função que retorna algum valor, é a <code>isHypsterStyle()</code>, para verificar se o estilo foi setado na função <code>handleDOM()</code>.</p>
<p>Podemos melhorar a função <code>handleDOM()</code>, removendo o <code>if</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDOM</span><span class="params">()</span> </span>{</div><div class="line">  isHypsterStyle() && fillBodyRed();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Ao passar o código acima pelo <a href="http://jshint.com/" target="_blank" rel="external">JSHint</a>, ele vai acusar um <em>warning</em>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Expected an assignment or <span class="function"><span class="keyword">function</span> <span class="title">call</span> <span class="title">and</span> <span class="title">instead</span> <span class="title">saw</span> <span class="title">an</span> <span class="title">expression</span>.</span></div></pre></td></tr></table></figure>

<p>Ou seja: nós estamos utilizando um operador lógico (<code>&amp;&amp;</code>), em <em>short circuit</em>, que normalmente é usado para testar expressões. Uma expressão normalmente retorna um valor. Se a expressão retorna um valor, para me aproveitar desse valor, eu preciso usar um <code>return</code> dentro da <code>function</code>, para que eu possa invocar essa função para obter esse valor, ou então atribuir à uma variável, por exemplo, para que eu possa usar o valor no futuro.</p>
<p>Como nossa função <code>fillBodyRed()</code> não retorna nada, mas é ela que será executada se <code>isHypsterStyle()</code> for <code>true</code>, precisamos de uma forma de avaliar essa expressão para remover o <em>warning</em>.</p>
<p>Poderíamos usar o <code>return</code>, mas não faria sentido pois não temos valor a retornar. É aqui que entra o <code>void</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDOM</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">void</span> ( isHypsterStyle() && fillBodyRed() );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Agora nós avaliamos a expressão e não retornamos nada. Esse é um uso válido do <code>void</code>. </p>
<h2 id="IIFE">IIFE</h2>
<p>Como você já deve ter visto no post sobre <a href="http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/" target="_blank" rel="external">invocação de funções</a>, para que uma função anônima seja invocada, ela também precisa ser transformada em uma expressão. Logo, também podemos usar o <code>void</code> nesse caso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  ...</div><div class="line">}();</div></pre></td></tr></table></figure>

<p>Normalmente quem trabalha com frontend tem seu primeiro contato com uma linguagem de programação através do Javascript, e acabam não entendendo algumas coisas, como é o caso do <code>void</code>. Espero que o seu uso tenha ficado claro :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/undefined.png" alt=""></p>
<p>Você já deve ter visto em alguns links por aí algo como <code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code>, não? Mas você sabe para quê usamos o <code>void</code> em Javascript? E sabe quando podemos usá-lo? Vem descobrir :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="void" scheme="http://blog.da2k.com.br/tags/void/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Hospedando seu site no Github]]></title>
    <link href="http://blog.da2k.com.br/2015/02/05/segredos-do-github-hospedando-seu-site-no-github/"/>
    <id>http://blog.da2k.com.br/2015/02/05/segredos-do-github-hospedando-seu-site-no-github/</id>
    <published>2015-02-05T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-gh-pages.png" alt=""></p>
<p><em>Mas eu já sei que eu posso usar o Github para versionar meu site. O que tem de segredo nisso?</em></p>
<p>Eu disse <strong>hospedar</strong>! Isso mesmo! Seu site pode ficar hospedado no <strong>Github</strong>, <em>for free</em>, e ser executado diretamente de lá, sem a necessidade de um servidor! Não sabe como fazer? Vem que eu te mostro então ;)</p>
<a id="more"></a>

<p>Uma ponto importante que eu preciso frizar antes de começar: o <strong>Github</strong> só aceita arquivos estáticos. Não adianta querer usar o <strong>Github</strong> para hospedar um site em <strong>PHP</strong> que não vai funcionar, blz? ;)</p>
<p>Ele só vai servir os arquivos <em>estáticos</em> gerados - HTML, CSS e JS, imagens, fontes, etc.</p>
<p>Para se aproveitar dessa feature, você pode cair em duas situações:</p>
<p>1) <em>Tenho um site pessoal que quero hospedar no <strong>Github</strong></em><br>2) <em>Tenho um projeto Open Source, em um repositório dentro da minha conta, e quero criar um site para ele.</em></p>
<h2 id="Site_Pessoal">Site Pessoal</h2>
<p>Para o seu site pessoal, você deve fazer o seguinte:</p>
<ul>
<li>crie um novo repositório na sua conta, com o seguinte padrão:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username.github.io</div></pre></td></tr></table></figure>

<p>Obviamente, trocando <code>username</code> pelo seu nome de usuário no <strong>Github</strong>. No meu caso, ficou <code>fdaciuk.github.io</code>. O repositório é esse: <a href="https://github.com/fdaciuk/fdaciuk.github.io/" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/</a></p>
<p>Fazendo isso, você pode subir seus arquivos estáticos para a branch <strong>master</strong> normalmente, e acessá-los pelo endereço:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://username.github.io</div></pre></td></tr></table></figure>

<p>De novo: trocando o <code>username</code> pelo seu nome de usuário!</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Site_para_projeto_open_source">Site para projeto open source</h2>
<p>Se você já tem um projeto open source no Github, e quer criar um site para ele, você precisa fazer o seguinte:</p>
<ul>
<li>crie uma branch orfã - em branco - chamada <code>gh-pages</code>.</li>
<li>suba os arquivos para essa branch.</li>
</ul>
<p>Para criar uma nova branch em branco, use o seguinte comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan gh-pages</div></pre></td></tr></table></figure>

<p>Só lembre de <strong>NUNCA</strong> fazer merge dessa branch na master. Os arquivos das duas branches serão completamente diferentes! Na <code>master</code>, ficarão os arquivos do seu projeto. Na <code>gh-pages</code>, somente os estáticos do site do projeto.</p>
<p>Você conseguirá acessar pelo seguinte endereço:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://username.github.io/repositoryname</div></pre></td></tr></table></figure>

<p>Não precisa falar do <code>username</code> de novo, né? :P</p>
<p>E troque o <code>repositoryname</code> pelo nome do seu repositório.</p>
<p>Para facilitar, veja como fica o acesso ao site do <a href="https://github.com/wpbrasil/odin" target="_blank" rel="external">Odin</a>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://wpbrasil.github.io/odin</div></pre></td></tr></table></figure>

<p>Onde temos a conta da organização <code>wpbrasil</code> e o repositório cadastrado como <code>odin</code>. Fácil, não?</p>
<h2 id="Usando_um_domínio_personalizado">Usando um domínio personalizado</h2>
<p>Para usar um domínio personalizado, você só precisa criar um arquivo chamado <code>CNAME</code>, - na branch onde estão os estáticos do seus site - e o conteúdo dele deve ser o seu domínio. </p>
<p>O <code>CNAME</code> do meu blog está com o conteúdo assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blog.da2k.com.br</div></pre></td></tr></table></figure>

<p>Não precisa do <code>http(s)</code>.</p>
<p>Depois você só precisa configurar para que o seu domínio aponte para os DNS do <strong>Github</strong>. Para fazer isso, siga esse tutorial: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/" target="_blank" rel="external">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/</a></p>
<p>Você pode usar tanto um domínio principal, como um subdomínio :)</p>
<h2 id="Geradores_de_estáticos">Geradores de estáticos</h2>
<p>E já respondendo à pergunta: Não! Você não precisa criar todos os seus arquivos HTML manualmente!</p>
<p>Existem milhares de ferramentas que geram estáticos, onde você escreve em uma linguagem específica - NodeJS, Ruby, etc - e o framework gera toda a estrutura dos estáticos para você. Aqui no blog, eu estou usando o <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>. Inclusive, fiz <a href="http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/" target="_blank" rel="external">um post</a>, mostrando como é simples usá-lo para começar um blog :D</p>
<p>O <strong>Hexo</strong> tem um plugin que gera um <code>sitemap.xml</code> e um <code>atom.xml</code>, onde fica o feed. </p>
<p>Eu posso criar templates para as páginas, usando <strong>EJS</strong>, <strong>Jade</strong> ou <strong>Markdown</strong>, posso usar <strong>Stylus</strong> para pré-processar o CSS, me aproveitar de partials para não ficar repetindo código, etc. No final, tudo é compilado para HTML, CSS e JS.</p>
<p>E para escrever os posts, posso utilizar <strong>Markdown</strong> &lt;3</p>
<p>Ele gera também uma estrutura de URLs amigáveis, que você pode escolher. Ou seja, é perfeito para SEO :)</p>
<p>Se quiser outras opções de geradores de estáticos, veja esses links:</p>
<ul>
<li><a href="https://github.com/pinceladasdaweb/Static-Site-Generators" target="_blank" rel="external">https://github.com/pinceladasdaweb/Static-Site-Generators</a></li>
<li><a href="https://www.staticgen.com/" target="_blank" rel="external">https://www.staticgen.com/</a></li>
<li><a href="https://staticsitegenerators.net/" target="_blank" rel="external">https://staticsitegenerators.net/</a></li>
<li><a href="http://www.modernstatic.com/" target="_blank" rel="external">http://www.modernstatic.com/</a></li>
</ul>
<p><em>Have fun</em> :)</p>
<h2 id="Jekyll">Jekyll</h2>
<p>Um outro detalhe importante, é que o <strong>Github</strong> consegue compilar seus estáticos sozinho, se você estiver usando o <strong>Jekyll</strong>. O <a href="https://github.com/willianjusten" target="_blank" rel="external">Willian Justen</a> já mostrou porque é interessante usar o <strong>Jekyll</strong> com o <strong>Github</strong>, nesse <a href="http://willianjusten.com.br/por-que-usar-jekyll/" target="_blank" rel="external">ótimo post</a>! E <a href="http://willianjusten.com.br/perguntas-e-respostas-jekyll/" target="_blank" rel="external">nesse outro</a> ele tira algumas dúvidas sobre a ferramenta. Vale muito a leitura!</p>
<p><em>That’s all folks!</em> Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-gh-pages.png" alt=""></p>
<p><em>Mas eu já sei que eu posso usar o Github para versionar meu site. O que tem de segredo nisso?</em></p>
<p>Eu disse <strong>hospedar</strong>! Isso mesmo! Seu site pode ficar hospedado no <strong>Github</strong>, <em>for free</em>, e ser executado diretamente de lá, sem a necessidade de um servidor! Não sabe como fazer? Vem que eu te mostro então ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git e Github - Do clone ao pull request]]></title>
    <link href="http://blog.da2k.com.br/2015/02/04/git-e-github-do-clone-ao-pull-request/"/>
    <id>http://blog.da2k.com.br/2015/02/04/git-e-github-do-clone-ao-pull-request/</id>
    <published>2015-02-04T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/git-clone-pull-request.jpg" alt=""></p>
<p>Você tem uma conta no Github, acompanha projetos open source, gostaria de colaborar com algum deles, mas não sabe como fazer? Como criar uma nova feature? Como preparar o repositório? O que é <em>git push</em>?</p>
<p>Se você tem essas dúvidas, esse artigo é pra você!</p>
<a id="more"></a>

<p>Alguns devs já me perguntaram como seria o workflow correto para colaborar com um projeto open source. Como criar uma nova branch, porque fazer isso, como enviar um pull request, como saber se o que você está fazendo está de acordo com o propósito do repositório.</p>
<p>Seguindo a dica do <a href="https://github.com/romuloctba" target="_blank" rel="external">Rômulo</a>, esse artigo é para você que quer aprender desde o básico necessário de git, até a submissão de um <em>pull request</em>, com um ajuste ou nova funcionalidade para um projeto no Github!</p>
<h2 id="Primeiros_passos_com_Git">Primeiros passos com Git</h2>
<p>Eu poderia escrever aqui todos os passos necessários para você instalar o git, criar seu projeto, criar um repositório local, criar branchs, etc. Mas o <a href="https://github.com/rogerdudler" target="_blank" rel="external">Roger Dudler</a> já fez um ótimo trabalho que você encontra <a href="http://rogerdudler.github.io/git-guide/index.pt_BR.html" target="_blank" rel="external">nesse link</a>, traduzido por brasileiros :)</p>
<h2 id="Escolhendo_o_repositório">Escolhendo o repositório</h2>
<p>Após seguir os passos acima, vocẽ já estará apto para fazer alterações em qualquer projeto e submeter o seu <em>pull request</em>!<br>E a primeira coisa que você tem que fazer é <strong>clonar</strong> o repositório que vocẽ quer colaborar!</p>
<p><em>Mas qual repositório eu escolho?</em></p>
<p>Se você não sabe em qual repositório pode colaborar, acesse o perfil de seus amigos no <strong>Github</strong>, veja os repositórios que eles têm e/ou seguem, e escolha algum que utilize uma linguagem que você está familiarizado, ou que quer aprender.</p>
<p>Fuce no código que está no repositório. Ele está ali para que você possa aprender com ele. Baixe, teste, procure por falhas! Quando encontrar algo que possa ser melhorado, é hora de você fazer a sua parte e enviar um <em>pull request</em> :D</p>
<p>Vamos pegar como exemplo o repositório do <strong>Gulp</strong>. Vamos fazer todos os passos e enviar nosso <em>pull request</em> através desse repositório.</p>
<h2 id="Forkando_o_repositório">Forkando o repositório</h2>
<p>A primeira coisa a fazer é <em>forkar</em> o repositório. Acesse a <a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">página do repositório no <strong>Github</strong></a>, e clique no botão <strong>Fork</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/fork-repository.png" alt="Forkar o repositório"></p>
<p><em>O que significa forkar?</em></p>
<p>A tradução literal de <em>fork</em> é <em>garfo</em>. Então, você dá uma “garfada” no repositório, dá aquela enrolada no garfo, e traz ele pra sua conta xD</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/forked-repository.png" alt="Repositório forkado"></p>
<p>Quando você <em>forkar</em> o repositório, repare que, abaixo do nome do repositório é mostrado o repositório original, ou seja, de onde ele foi <em>forkado</em>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/forked-from.png" alt="Forkado de"></p>
<p>Você agora pode fazer o que quiser com esse repositório (tomando cuidado com a <a href="http://blog.da2k.com.br/2015/02/02/segredos-do-github-licencas/" target="_blank" rel="external">licença</a> sob a qual ele foi liberado). A ideia aqui é resolver um problema e enviar o <em>pull request</em> com a correção para o repositório original. Como você não tem permissão para comitar diretamente no repositório principal, você precisa forkar e alterar no seu, para então submeter a correção.</p>
<p>Após <em>forkar</em>, vamos fazer nossas alterações!</p>
<h2 id="Clonando_o_repositório">Clonando o repositório</h2>
<p>Agora você precisa baixar os arquivos do repositório para que você possa alterar. A primeira coisa a fazer é copiar a URL do repositório daqui:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/clone-repository.png" alt="Clonar repositório"></p>
<p>Confira se o texto de cima do <code>input</code> está como <code>SSH clone URL</code>. Se não estiver, clique no link SSH que aparece abaixo do <code>input</code>.</p>
<p>Após copiar a URL, abra seu terminal, crie um diretório onde você vai guardar o projeto, e digite <code>git clone &lt;url-do-repositorio&gt;</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> clone git<span class="variable">@github</span>.com:fdaciuk/gulp.git</div></pre></td></tr></table></figure>

<p>O comando <code>git clone</code> pega o repositório como ele está no <strong>Github</strong>, já iniciado e com todo o histórico de commits atualizado. Seria o mesmo que você executar os comandos:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git init</div><div class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@github</span>.<span class="symbol">com:</span>fdaciuk/gulp.git</div><div class="line"><span class="variable">$ </span>git pull origin master</div></pre></td></tr></table></figure>

<p>Pronto! Já temos nosso projeto clonado em nossa máquina local! Com esse comando (<code>git clone</code>), será criado um diretório com o mesmo nome do repositório. Entrando nele (<code>cd gulp</code>), vamos começar a codar!</p>
<h2 id="Criando_a_branch_para_codar_a_feature">Criando a branch para codar a feature</h2>
<p>Agora vamos criar uma nova <em>branch</em> para a nossa feature. Digamos que vamos melhorar o método <code>watch()</code> do <strong>Gulp</strong>. Vamos criar uma <em>branch</em> com um nome que diga o que será feito. Antes de tudo, garanta que você está na branch <strong>master</strong>, executando o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> branch</div></pre></td></tr></table></figure>

<p>A resposta deve ser:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>master</div></pre></td></tr></table></figure>

<p><em>Porque precisa estar na master?</em></p>
<p>Por convenção, o <strong>git</strong> utiliza a <em>branch</em> master como padrão, para o código estável do projeto. Então, tudo o que estiver nessa <em>branch</em>, em qualquer repositório, <del>teóricamente</del> é código estável. Logo, você nunca irá mexer diretamente nela, mas em outras branchs, para então fazer <strong>merge</strong> com a master.</p>
<p>Agora vamos criar a <em>branch</em> com nossa feature. Temos duas formas de fazer isso. A forma mais rápida é:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout -b improve_method_watch</div></pre></td></tr></table></figure>

<p><code>improve_method_watch</code> é o nome da nossa <em>branch</em>. A outra forma de criar um repositório é com os comandos:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git branch improve_method_watch</div><div class="line"><span class="variable">$ </span>git checkout improve_method_watch</div></pre></td></tr></table></figure>

<p>O primeiro comando cria a branch. O segundo comando troca da branch <strong>master</strong> para a branch <strong>improve_method_watch</strong>.</p>
<p>Mas o primeiro comando que executamos (<code>git checkout -b improve_method_watch</code>), já faz essas duas coisas em um comando só: cria a branch (<code>-b</code>) e já muda para a branch criada (<code>git checkout</code>).</p>
<p>Ok. Agora podemos trabalhar! Vamos codar o que for necessário para deixar essa feature funcionando!</p>
<p><em>Tá, mas porque eu preciso criar uma nova branch? Se tudo irá para a master, porque não posso codar direto ali?</em></p>
<p>Como eu disse, a branch <strong>master</strong> é a branch com o código final do projeto, estável. Criando uma nova branch, se você submeter o <em>pull request</em> para o repositório original, mas ele não for aceito, as alterações não estarão na sua branch master. Dessa forma, se você quiser manter sempre os dois repositórios atualizados e sincronizados, você só precisa apagar a branch que você criou e fez a feature. As duas <strong>master</strong> vão continuar iguaizinhas :)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Dicas_para_um_bom_Pull_Request">Dicas para um bom Pull Request</h2>
<p>Quando você for fazer um <em>pull request</em>, a pessoa que é responsável pelo repositório terá de conferir se o código que você está enviando está de acordo com os padrões definidos para aquele projeto. Por isso, tenha em mente que o seu <em>pull request</em> deve ter <strong>pouco código</strong>. Se a funcionalidade que você quer implementar for muito grande, quebre em partes menores, e envie <em>pull requests</em> pequenos, com o mínimo de alterações possíveis. </p>
<p>Isso vai facilitar a conferência do código, e a sua feature terá maiores chances de ser aceita e fazer parte do projeto principal :)</p>
<p>Após codar sua alteração, é hora de enviar para o seu <em>fork</em>. Primeiro você precisa <em>commitar</em> sua alteração:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> --<span class="keyword">all</span></div><div class="line">$ git commit -<span class="keyword">m</span> <span class="string">"Mensagem de commit"</span></div></pre></td></tr></table></figure>

<p>Coloque uma mensagem que defina exatamente o que você fez. De preferência, a cada pequena parte que você codar, comite com uma mensagem que diga o que está sendo feito até ali. Exemplo:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> -<span class="keyword">all</span></div><div class="line">$ git commit -<span class="keyword">m</span> <span class="string">"Remove código não utilizado"</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> -<span class="keyword">all</span></div><div class="line">$ git commit -<span class="keyword">m</span> <span class="string">"Ajusta posicionamento do botão de submeter formulário, na página de contato"</span></div></pre></td></tr></table></figure>

<p>Só alguns exemplos de mensagens de commit. Disserte um pouco sobre a funcionalidade que você está criando. Não precisa ser nada muito formal, mas escreva de uma forma que qualquer pessoa que ler, entenda.</p>
<p>Lembrando que, se você estiver fazendo uma alteração para um projeto em inglês, a mensagem de commit deve ser nessa língua.</p>
<p>Após comitar, nossa alteração já está na árvore do <strong>git</strong>. Vamos agora subir para o nosso repositório forkado:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">push</span> origin improve_method_watch</div></pre></td></tr></table></figure>

<p>Você vai rodar esse comando, trocando <code>improve_method_watch</code> pelo nome da sua <em>branch</em>, obviamente.</p>
<p>Fazendo isso, acesse a conta do repositório original no <strong>Github</strong>, e você verá uma mensagem como essa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/message-pull-request.png" alt="Mensagem de Pull Request no Github"></p>
<p>Depois é só clicar no botão verde <strong>Compare &amp; Pull Request</strong>.</p>
<p><em>Você tá falando de Pull Request desde que começou esse tutorial, mas afinal, o que é Pull Request?</em></p>
<p><em>Pull Request</em> é quando você envia uma sugestão de melhoria para o repositório. </p>
<p>Quando você quer <em>trazer</em>, <em>pegar</em>, <em>puxar</em> algo para o seu repositório usando o git, você usa o comando <code>git pull</code>. Então, um <em>pull request</em> nada mais é do que uma requisição, ou pedido para que aquele repositório faça um <em>pull</em> com as suas alterações. :)</p>
<p>Após clicar no botão <strong>Compare &amp; Pull Request</strong>, você será direcionado para a tela onde você vai criar o <em>pull request</em>, e pode conferir se as alterações que aparecem realmente correspondem às alterações que você fez:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/create-pull-request.png" alt="Mensagem de Pull Request"></p>
<p>Na imagem acima você pode ver:</p>
<ul>
<li>Onde diz <strong>base fork</strong> é o diretório padrão. No meu caso, está em <strong>gulpjs/gulp</strong>.</li>
<li>Ao lado, a <em>branch</em> para a qual eu vou enviar meu <em>pull request</em>. Vou enviar direto para a master do repositório padrão.</li>
<li><strong>head fork</strong> é o seu repositório, que você forkou. Na imagem, é o <strong>fdaciuk/gulp</strong>.</li>
<li>E por fim, a <em>branch</em> onde eu fiz a alteração: <em>compare improve_method_watch</em></li>
</ul>
<p>Depois disso, você vai colocar um título no seu <em>pull request</em>, para que, ao visualizar a listagem de <em>pull requests</em>, fique fácil saber do que se trata. Normalmente, quando você só tem uma mensagem de commit, esse título é assumido com a mensagem. Ajuste conforme a necessidade.</p>
<p>Não esqueça também de comentar porque você está fazendo esse <em>pull request</em>, e porque esse ajuste que você fez, faz sentido para o repositório. Uma boa defesa pode ajudar a fazer com que seu <em>pull request</em> seja aceito.</p>
<p>Antes de clicar no botão <strong>Create Pull Request</strong>, confira os dados da imagem abaixo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/check-pull-request.png" alt="Conferir Pull Request"></p>
<p>Rolando um pouco, você vai ver os commits que você fez. Confira se está na branch correta, e que você está enviando somente aquilo que vocẽ alterou. Se você escolher uma branch errada para enviar, você verá milhares de outras alterações - ou talvez nenhuma, se for a mesma branch - que não fará sentido de ser feito o <strong>merge</strong> do <em>pull request</em>.</p>
<p>No meu caso, eu fiz só uma alteração no <strong>README.md</strong>, adicionando um plugin do <strong>Gulp</strong> (<code>gulp-util</code>) na sessão de <em>plugins recomendados</em>.</p>
<p>Depois de tudo verificado, clique no botão <strong>Creat Pull Request</strong> e aguarde a resposta! Você será avisado por e-mail - se você não desabilitou as notificações - se houver qualquer atividade nesse <em>pull request</em>: comentários tanto no <em>pull request</em> como nos códigos, para que você possa modificar algo, se a <em>branch</em> for fechada, porque o autor achou que a alteração não fez sentido, ou ainda se o <strong>merge</strong> for feito. </p>
<p>Se ele fez o <strong>merge</strong>, então sua alteração já faz parte do repositório principal, e você aparecerá na guia <strong>Contributors</strong> do repositório principal:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/contributors.png" alt="Colaboradores"></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/contributors-list.png" alt="Lista de colaboradores"></p>
<p>Como você viu na imagem acima, aparece quantos commits você fez, quanto código você adicionou e quanto você removeu!</p>
<h2 id="Manter_o_projeto_sempre_atualizado">Manter o projeto sempre atualizado</h2>
<p>Para que o seu projeto tenha sempre as últimas alterações do repositório principal, siga as instruções <a href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/" target="_blank" rel="external">desse link</a>.</p>
<p>Agora você não tem mais desculpas para não colaborar com algum projeto no <strong>Github</strong>! Cada vez que você colabora para um projeto <em>open source</em>, você ganha conhecimento e cresce como profissional! Siga a <a href="https://www.youtube.com/watch?v=dkLCn2S03ws" target="_blank" rel="external">dica do E.T. Bilú</a>: busque conhecimento!</p>
<p>Ficou alguma dúvida? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/git-clone-pull-request.jpg" alt=""></p>
<p>Você tem uma conta no Github, acompanha projetos open source, gostaria de colaborar com algum deles, mas não sabe como fazer? Como criar uma nova feature? Como preparar o repositório? O que é <em>git push</em>?</p>
<p>Se você tem essas dúvidas, esse artigo é pra você!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="git" scheme="http://blog.da2k.com.br/tags/git/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Tipos de conteúdo]]></title>
    <link href="http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/"/>
    <id>http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/</id>
    <published>2015-02-03T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/lorem-wordpress.jpg" alt=""></p>
<p><em>O que eu posso fazer com WordPress?</em> A resposta para isso é: o que a sua imaginação permitir! Além dos tipos de conteúdo que ele traz por padrão, você ainda tem infinitas possibilidades de criação de novos tipos de conteúdo e personalização! </p>
<p>Hoje vamos conhecer um pouco sobre cada um deles! :D</p>
<a id="more"></a>

<h2 id="Tipos_de_conteúdo">Tipos de conteúdo</h2>
<p>Como vocế já deve saber, o WordPress teve seu início como uma plataforma de blog. E até hoje ele ainda serve muito bem para esse propósito. Mas hoje, ele é muito mais do que isso: o WordPress é um framework que te oferece várias ferramentas para que você crie qualquer tipo de conteúdo que possa ser gerenciado pelo <a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">Painel</a>!</p>
<p>O WordPress trata todo tipo de conteúdo como “post”. Então, quando nos referirmos a “post”, estaremos falando de qualquer tipo de conteúdo que tenha alguma “postagem”, e não os posts de um blog, - a menos que isso seja dito - ok?</p>
<p>O WordPress tem 5 tipos de conteúdo por padrão:</p>
<ul>
<li>Post (Post Type “post”);</li>
<li>Page (Post Type “page”);</li>
<li>Attachment (Post Type “attachment”);</li>
<li>Revision(Post Type “revision”);</li>
<li>Navigation Menu (Post Type “nav_menu_item”).</li>
</ul>
<h3 id="Post">Post</h3>
<p><strong>Post</strong> é um tipo de conteúdo normalmente usado para mostrar conteúdo de um blog. Eles são ordenados por data decrescente, ou seja, o mais recente aparece primeiro. Eles também são usados para criação dos <a href="http://codex.wordpress.org/Glossary#Feed" target="_blank" rel="external">Feeds</a>.</p>
<h3 id="Pages">Pages</h3>
<p><strong>Page</strong> é um tipo de conteúdo parecido com o <strong>post</strong>, mas ele é ordenado hierarquicamente, ou seja, páginas podem ter páginas filhas, e sua ordem, mostrada no site, é a ordem que você deixa no Painel. <strong>Pages</strong> ainda podem usar <strong>template pages</strong>, onde você pode criar um template e setar como uma página irá ficar.</p>
<h3 id="Attachment">Attachment</h3>
<p><strong>Attachment</strong> é um tipo especial de conteúdo, que guarda informações de todos os arquivos que foram “subidos” para o site.</p>
<h3 id="Revision">Revision</h3>
<p><strong>Revision</strong> é usado para fazer revisões de posts. Nesse tipo de conteúdo, os posts que são automaticamente salvos, ficam com uma cópia anterior nesse tipo de conteúdo, para que, se você fez alguma besteira, você tenha a opção de voltar algumas versões atrás.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h3 id="Navigation_Menu">Navigation Menu</h3>
<p>Esse é um tipo de conteúdo que guarda informações de cada item do menu no <strong>Painel</strong>.</p>
<h2 id="Custom_Post_Types_(CPT)">Custom Post Types (CPT)</h2>
<p><strong>Tipos de post personalizados</strong> ou <strong>Tipos de conteúdo personalizados</strong>, são os tipos de conteúdo que você pode criar. Quando você cria um CPT, você escolhe se ele vai ser no estilo dos <strong>posts</strong> (cronológico) ou no estilo de <strong>pages</strong> (hierárquico). Entraremos mais a fundo nesse assunto quando estivermos criando nossos próprios “Post Types” (ou “Content Types”, como alguns gostam de chamar)! o/</p>
<p>No próximo post, veremos como é a estrutura de templates do WordPress, e como isso afeta os tipos de conteúdo!</p>
<p>Até a pŕóxima! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-2/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-2/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/lorem-wordpress.jpg" alt=""></p>
<p><em>O que eu posso fazer com WordPress?</em> A resposta para isso é: o que a sua imaginação permitir! Além dos tipos de conteúdo que ele traz por padrão, você ainda tem infinitas possibilidades de criação de novos tipos de conteúdo e personalização! </p>
<p>Hoje vamos conhecer um pouco sobre cada um deles! :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Licenças]]></title>
    <link href="http://blog.da2k.com.br/2015/02/02/segredos-do-github-licencas/"/>
    <id>http://blog.da2k.com.br/2015/02/02/segredos-do-github-licencas/</id>
    <published>2015-02-02T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-license.png" alt=""></p>
<p><em>Licença</em> não é só sinônimo de educação (<del>só piada boa!</del>). No mundo do software, o que define como aquele software será distribuído? O software será pago? Outras pessoas poderão distribuí-lo sem problemas, ou terão que pagar por isso? Ou ainda, podem distribuir o software, mas terão que citar o autor?</p>
<p>Quem responde a essas perguntas são as <em>licenças!</em></p>
<a id="more"></a>

<p>Não vou entrar em muitos detalhes sobre as licenças, pois o post é sobre como o Github nos ajuda com elas. Mas é necessário uma pequena divagação sobre o assunto.</p>
<p>Quando você coloca seu código na internet, ele fica disponível para milhões de pessoas o aproveitarem como bem entenderem. Algumas irão utilizar seu código, citando que você é o autor, outras simplesmente irão copiá-lo, como se fossem os próprios autores. Enfim, internet é terra de ninguém, e todos sabemos disso. </p>
<p>O que te “garante” algo é a licença que você disponibiliza junto com seu código. Existem vários tipos de licenças.</p>
<p>Algumas das mais utilizadas conhecidas são: MIT, GPL, LGPL, BSD.</p>
<p><em>Mas o que o Github tem a ver com isso?</em></p>
<p>Quando você cria um novo repositório, o Github te dá a opção de adicionar uma licença:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/license.png" alt=""></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p><em>Mas eu já tenho meu projeto, e não tenho uma licença ainda? Como escolher?</em></p>
<p>Se você já criou seu repositório, você tem a opção de criar o arquivo de licença através do link <code>+</code>, mostrado abaixo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/new-license.png" alt=""></p>
<p>Será mostrada a tela para criar um novo arquivo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/new-file-github.png" alt=""></p>
<p>Coloque o nome do arquivo como <code>LICENSE</code>, e veja a mágica acontecer:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/new-file-github-license.png" alt=""></p>
<p>Agora é só escolher uma licença, e salvar. Ao fazer isso, já fica registrado um novo commit com a alteração :D</p>
<p>Para saber mais sobre lincenças, segue alguns links interessantes:</p>
<ul>
<li><a href="http://ccsl.ime.usp.br/files/relatorio-licencas.pdf" target="_blank" rel="external">http://ccsl.ime.usp.br/files/relatorio-licencas.pdf</a></li>
<li><a href="http://www.dirceupauka.com/entendendo-a-licenca-mit" target="_blank" rel="external">http://www.dirceupauka.com/entendendo-a-licenca-mit</a></li>
</ul>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-license.png" alt=""></p>
<p><em>Licença</em> não é só sinônimo de educação (<del>só piada boa!</del>). No mundo do software, o que define como aquele software será distribuído? O software será pago? Outras pessoas poderão distribuí-lo sem problemas, ou terão que pagar por isso? Ou ainda, podem distribuir o software, mas terão que citar o autor?</p>
<p>Quem responde a essas perguntas são as <em>licenças!</em></p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - mantendo a ordem no seu repositório]]></title>
    <link href="http://blog.da2k.com.br/2015/02/01/segredos-do-github-mantendo-a-ordem-no-seu-repositorio/"/>
    <id>http://blog.da2k.com.br/2015/02/01/segredos-do-github-mantendo-a-ordem-no-seu-repositorio/</id>
    <published>2015-02-01T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/2015/02/github-secrets-clean-repository.png" alt=""></p>
<p>Uma dica simples, mas funcional!</p>
<a id="more"></a>

<p>Quando você cria uma nova feature para um projeto open source, normalmente você cria uma branch nova, faz suas alterações, faz o <em>push</em> para o seu repositório nessa nova branch e então envia um <em>pull request</em>.</p>
<p>Quando o <em>pull request</em> é aceito, você faz o <a href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/" target="_blank" rel="external">processo para atualizar o seu repositório com o repositório forkado</a> e tudo fica 100% como deveria!</p>
<p>Mas, com o tempo, sua lista de branchs no <strong>Github</strong> vai aumentando, mas você não vai mais precisar delas, pois seu <em>pull request</em> já foi aceito. Como limpar a sujeira e deixar somente as branchs que você precisa?</p>
<h2 id="Removendo_branchs_do_Github">Removendo branchs do Github</h2>
<p>Para remover uma branch do <strong>Github</strong>, você pode usar o comando no seu terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin nome_da_branch --delete</div></pre></td></tr></table></figure>

<p>Isso irá deletar a branch do <strong>Github</strong>!</p>
<p>Você pode ainda fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :nome_da_branch</div></pre></td></tr></table></figure>

<p>Com os dois pontos (<code>:</code>) na frente do nome da branch, o resultado é o mesmo :D</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Removendo_branchs_localmente">Removendo branchs localmente</h2>
<p>E para remover branchs localmente, o comando é:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D nome_da_branch</div></pre></td></tr></table></figure>

<p>Dica rápida, mas ajuda a organizar a casa :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/2015/02/github-secrets-clean-repository.png" alt=""></p>
<p>Uma dica simples, mas funcional!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - incentivar a contribuição para seus projetos open source]]></title>
    <link href="http://blog.da2k.com.br/2015/01/31/segredos-do-github-incentivar-a-contribuicao-para-seus-projetos-open-source/"/>
    <id>http://blog.da2k.com.br/2015/01/31/segredos-do-github-incentivar-a-contribuicao-para-seus-projetos-open-source/</id>
    <published>2015-01-31T00:00:00.000Z</published>
    <updated>2015-02-17T03:30:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-contributing.png" alt=""></p>
<p>Contribuir para projetos open source é algo que nos faz crescer muito como profissionais. Temos a oportunidade de aprender coisas novas e praticar o que muitas vezes não utilizamos comumente no nosso dia-a-dia. Como o Github nos ajuda com isso?</p>
<a id="more"></a>

<p>Cada pessoa que cria um projeto open source tem sua forma de escrever seus códigos, organizar a estrutura de arquivos, etc. Se o projeto é interessante, outras pessoas acabam ficando interessadas em contribuir. Mas a frustração vem quando descobrimos que cada um escreve seu código de uma forma: alguns usam tabs, outros espaços; uns preferem 4 espaços, outros preferem 2; colocar espaço entre o <code>if</code> e os <code>()</code> ou não, escrever o<code>else</code> em uma nova linha, ou na mesma linha do fechamento do <code>}</code>, etc.</p>
<p>Nenhuma forma está errada! São apenas diferentes modos de escrever o mesmo código! Mas se um mesmo código tiver várias dessas formas misturadas, o projeto vai acabar virando uma zona!</p>
<p>Então, normalmente você coloca no <strong>README.md</strong> do seu repositório uma área de <strong>Como contribuir</strong>, citando os padrões que você utilizou no código, mostrando como criar uma nova feature, etc.</p>
<p>Mas no momento de empolgação, muitas vezes os devs nem chegam nessa parte do seu <strong>README</strong>, e acabam enviando <em>pull requests</em> com seus próprios padrões.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="O_arquivo_CONTRIBUTING-md">O arquivo CONTRIBUTING.md</h2>
<p>Uma feature bem simples do Github, mas que pode ajudar a organizar melhor a colaboração nos seus projetos, é você adicionar um arquivo chamado <code>CONTRIBUTING.md</code>.</p>
<p>Nesse arquivo você coloca tudo o que a pessoa que vai colaborar com o seu projeto precisa saber.</p>
<p><em>Mas se o dev nem chega a ler o <strong>README</strong>, como ele vai saber que tem um arquivo separado com as informações de como contribuir?</em></p>
<p>É aí que está o pulo do gato! Quando você cria esse arquivo, sempre que alguém for criar uma nova <em>issue</em> ou enviar um <em>pull request</em>, olha o que vai aparecer pra ele:</p>
<p><img src="https://camo.githubusercontent.com/b38f439e43db12ebcbf6f6f2b8afe88862d31e47/687474703a2f2f692e696d6775722e636f6d2f726e38334e58672e706e67" alt=""></p>
<p>O “<strong>guidelines for contributing</strong>“ que aparece na mensagem acima, é linkado diretamente com o seu arquivo <strong>CONTRIBUTING.md</strong>! Assim, sempre que alguém for colaborar, ele verá esse aviso, e ainda que não leia o <strong>README</strong>, verá que existem alguns padrões a serem seguidos para que ele possa contribuir! :D</p>
<p>Claro que pode acontecer do dev nem clicar pra ler, mas com certeza ele verá o aviso ;)</p>
<p>Já conhecia essa feature? Bacana, não? :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-contributing.png" alt=""></p>
<p>Contribuir para projetos open source é algo que nos faz crescer muito como profissionais. Temos a oportunidade de aprender coisas novas e praticar o que muitas vezes não utilizamos comumente no nosso dia-a-dia. Como o Github nos ajuda com isso?</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
</feed>
